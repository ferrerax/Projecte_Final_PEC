
temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .sistema	00000000 .sistema
0000c0c4 l       .sistema	00000000 RSI__interrup_timer
0000c016 l       .sistema	00000000 RSI_default_resume
0000c0e6 l       .sistema	00000000 RSI__interrup_keyboard
0000c018 l       .sistema	00000000 RSE_default_halt
0000c01a l       .sistema	00000000 RSE_default_resume
0000c01c l       .sistema	00000000 RSE_excepcion_TLB
0000c014 l       .sistema	00000000 __exit
0000c05e l       .sistema	00000000 __call_sistema
0000c072 l       .sistema	00000000 __interrupcion
0000c050 l       .sistema	00000000 __excepcion
0000c080 l       .sistema	00000000 __finRSG
0000c0a0 l       .sistema	00000000 __finRSG_timer
0000c000 g       .sistema	00000000 __entry_point
0000c170 g     F .sistema	00000054 schedule
0000c13e g     F .sistema	00000032 sched_next_rr
0000c1c4 g     F .sistema	00000018 main
0000c024 g       .sistema	00000000 RSG
0000c0e8 g     F .sistema	00000056 task_switch


Disassembly of section .sistema:

0000c000 <__entry_point>:
    c000:	5224 	movi	r1, 36
    c002:	53c0 	movhi	r1, -64
    c004:	fa70 	wrs	s5, r1
    c006:	5e00 	movi	r7, 0
    c008:	5f40 	movhi	r7, 64
    c00a:	5a14 	movi	r5, 20
    c00c:	5bc0 	movhi	r5, -64
    c00e:	5cc4 	movi	r6, -60
    c010:	5dc1 	movhi	r6, -63
    c012:	a183 	jmp	r6

0000c014 <__exit>:
    c014:	ffff 	halt	

0000c016 <RSI_default_resume>:
    c016:	a183 	jmp	r6

0000c018 <RSE_default_halt>:
    c018:	ffff 	halt	

0000c01a <RSE_default_resume>:
    c01a:	a183 	jmp	r6

0000c01c <RSE_excepcion_TLB>:
    c01c:	f46c 	rds	r2, s1
    c01e:	24be 	addi	r2, r2, -2
    c020:	f2b0 	wrs	s1, r2
    c022:	a183 	jmp	r6

0000c024 <RSG>:
    c024:	2ff2 	addi	r7, r7, -14
    c026:	41c6 	st	12(r7), r0
    c028:	43c5 	st	10(r7), r1
    c02a:	45c4 	st	8(r7), r2
    c02c:	47c3 	st	6(r7), r3
    c02e:	49c2 	st	4(r7), r4
    c030:	4bc1 	st	2(r7), r5
    c032:	4dc0 	st	0(r7), r6
    c034:	f22c 	rds	r1, s0
    c036:	f46c 	rds	r2, s1
    c038:	f6ec 	rds	r3, s3
    c03a:	2ffa 	addi	r7, r7, -6
    c03c:	43c2 	st	4(r7), r1
    c03e:	45c1 	st	2(r7), r2
    c040:	47c0 	st	0(r7), r3
    c042:	f2ac 	rds	r1, s2
    c044:	540e 	movi	r2, 14
    c046:	165a 	cmpeq	r3, r1, r2
    c048:	670a 	bnz	r3, 22
    c04a:	540f 	movi	r2, 15
    c04c:	165a 	cmpeq	r3, r1, r2
    c04e:	6711 	bnz	r3, 36

0000c050 <__excepcion>:
    c050:	5408 	movi	r2, 8
    c052:	5580 	movhi	r2, -128
    c054:	0261 	add	r1, r1, r1
    c056:	04a1 	add	r2, r2, r1
    c058:	3480 	ld	r2, 0(r2)
    c05a:	ac84 	jal	r6, r2
    c05c:	6611 	bz	r3, 36

0000c05e <__call_sistema>:
    c05e:	f2ec 	rds	r1, s3
    c060:	5407 	movi	r2, 7
    c062:	0242 	and	r1, r1, r2
    c064:	0261 	add	r1, r1, r1
    c066:	5424 	movi	r2, 36
    c068:	5580 	movhi	r2, -128
    c06a:	04a1 	add	r2, r2, r1
    c06c:	3480 	ld	r2, 0(r2)
    c06e:	ac84 	jal	r6, r2
    c070:	6707 	bnz	r3, 16

0000c072 <__interrupcion>:
    c072:	f228 	getiid	r1
    c074:	0261 	add	r1, r1, r1
    c076:	5400 	movi	r2, 0
    c078:	5580 	movhi	r2, -128
    c07a:	04a1 	add	r2, r2, r1
    c07c:	3480 	ld	r2, 0(r2)
    c07e:	ac84 	jal	r6, r2

0000c080 <__finRSG>:
    c080:	37c0 	ld	r3, 0(r7)
    c082:	35c1 	ld	r2, 2(r7)
    c084:	33c2 	ld	r1, 4(r7)
    c086:	2fc6 	addi	r7, r7, 6
    c088:	f6f0 	wrs	s3, r3
    c08a:	f2b0 	wrs	s1, r2
    c08c:	f070 	wrs	s0, r1
    c08e:	3dc0 	ld	r6, 0(r7)
    c090:	3bc1 	ld	r5, 2(r7)
    c092:	39c2 	ld	r4, 4(r7)
    c094:	37c3 	ld	r3, 6(r7)
    c096:	35c4 	ld	r2, 8(r7)
    c098:	33c5 	ld	r1, 10(r7)
    c09a:	31c6 	ld	r0, 12(r7)
    c09c:	2fce 	addi	r7, r7, 14
    c09e:	f024 	reti	

0000c0a0 <__finRSG_timer>:
    c0a0:	39c0 	ld	r4, 0(r7)
    c0a2:	37c1 	ld	r3, 2(r7)
    c0a4:	35c2 	ld	r2, 4(r7)
    c0a6:	33c3 	ld	r1, 6(r7)
    c0a8:	2fc8 	addi	r7, r7, 8
    c0aa:	37c0 	ld	r3, 0(r7)
    c0ac:	35c1 	ld	r2, 2(r7)
    c0ae:	33c2 	ld	r1, 4(r7)
    c0b0:	2fc6 	addi	r7, r7, 6
    c0b2:	3dc0 	ld	r6, 0(r7)
    c0b4:	3bc1 	ld	r5, 2(r7)
    c0b6:	39c2 	ld	r4, 4(r7)
    c0b8:	37c3 	ld	r3, 6(r7)
    c0ba:	35c4 	ld	r2, 8(r7)
    c0bc:	33c5 	ld	r1, 10(r7)
    c0be:	31c6 	ld	r0, 12(r7)
    c0c0:	2fce 	addi	r7, r7, 14
    c0c2:	f024 	reti	

0000c0c4 <RSI__interrup_timer>:
    c0c4:	2ff8 	addi	r7, r7, -8
    c0c6:	43c3 	st	6(r7), r1
    c0c8:	45c2 	st	4(r7), r2
    c0ca:	47c1 	st	2(r7), r3
    c0cc:	49c0 	st	0(r7), r4
    c0ce:	5860 	movi	r4, 96
    c0d0:	5960 	movhi	r4, 96
    c0d2:	3700 	ld	r3, 0(r4)
    c0d4:	26c1 	addi	r3, r3, 1
    c0d6:	4700 	st	0(r4), r3
    c0d8:	7706 	out	6, r3
    c0da:	5470 	movi	r2, 112
    c0dc:	55c1 	movhi	r2, -63
    c0de:	a684 	jal	r3, r2
    c0e0:	58a0 	movi	r4, -96
    c0e2:	59c0 	movhi	r4, -64
    c0e4:	a103 	jmp	r4

0000c0e6 <RSI__interrup_keyboard>:
    c0e6:	a183 	jmp	r6

0000c0e8 <task_switch>:

/* running = 0 -> fibonacci a correletras
   running = 1 -> correletras a fibonacci*/
void task_switch()
{
    c0e8:	2ff6 	addi	r7, r7, -10
    c0ea:	4bc4 	st	8(r7), r5
    c0ec:	4dc3 	st	6(r7), r6
    c0ee:	2dc6 	addi	r6, r7, 6
    c0f0:	45c0 	st	0(r7), r2
    int espOLD, espNEW;
    if (running) espOLD = fibonacci_esp;
    c0f2:	5200 	movi	r1, 0
    c0f4:	534a 	movhi	r1, 74
    c0f6:	3240 	ld	r1, 0(r1)
    c0f8:	6206 	bz	r1, 14
    c0fa:	5236 	movi	r1, 54
    c0fc:	5380 	movhi	r1, -128
    c0fe:	3240 	ld	r1, 0(r1)
    c100:	43be 	st	-4(r6), r1
    c102:	5a00 	movi	r5, 0
    c104:	6a04 	bz	r5, 10
    else         espOLD = correletras_esp;
    c106:	5234 	movi	r1, 52
    c108:	5380 	movhi	r1, -128
    c10a:	3240 	ld	r1, 0(r1)
    c10c:	43be 	st	-4(r6), r1
    
    __asm__ (  
    c10e:	33be 	ld	r1, -4(r6)
    c110:	fa6c 	rds	r5, s1
    c112:	f270 	wrs	s1, r1
    c114:	2340 	addi	r1, r5, 0
    c116:	43bf 	st	-2(r6), r1
            "rds r5, s1\n\t"
            "wrs s1, %1\n\t"
            "addi %0, r5, 0\n\t"
            : "=r" (espNEW)
            : "r" (espOLD));
    
    if (running) correletras_esp = espNEW;
    c118:	5200 	movi	r1, 0
    c11a:	534a 	movhi	r1, 74
    c11c:	3240 	ld	r1, 0(r1)
    c11e:	6206 	bz	r1, 14
    c120:	5434 	movi	r2, 52
    c122:	5580 	movhi	r2, -128
    c124:	33bf 	ld	r1, -2(r6)
    c126:	4280 	st	0(r2), r1
    c128:	5a00 	movi	r5, 0
    c12a:	6a04 	bz	r5, 10
    else         fibonacci_esp = espNEW;
    c12c:	5436 	movi	r2, 54
    c12e:	5580 	movhi	r2, -128
    c130:	33bf 	ld	r1, -2(r6)
    c132:	4280 	st	0(r2), r1
    
}
    c134:	35c0 	ld	r2, 0(r7)
    c136:	3dc3 	ld	r6, 6(r7)
    c138:	3bc4 	ld	r5, 8(r7)
    c13a:	2fca 	addi	r7, r7, 10
    c13c:	a143 	jmp	r5

0000c13e <sched_next_rr>:
/*
void update_sched_data_rr(void)
{
  remaining_quantum--;
}*/
/*
int needs_sched_rr(void)
{
  if (remaining_quantum <= 0) return 1;
  return 0;
}*/

void sched_next_rr(void)
{
    c13e:	2ffa 	addi	r7, r7, -6
    c140:	4bc2 	st	4(r7), r5
    c142:	4dc1 	st	2(r7), r6
    c144:	2dc2 	addi	r6, r7, 2
    c146:	45c0 	st	0(r7), r2
  remaining_quantum=DEFAULT_QUANTUM;
    c148:	5438 	movi	r2, 56
    c14a:	5580 	movhi	r2, -128
    c14c:	520a 	movi	r1, 10
    c14e:	4280 	st	0(r2), r1

  task_switch();
    c150:	52e8 	movi	r1, -24
    c152:	53c0 	movhi	r1, -64
    c154:	aa44 	jal	r5, r1
  running = !running;
    c156:	5200 	movi	r1, 0
    c158:	534a 	movhi	r1, 74
    c15a:	3440 	ld	r2, 0(r1)
    c15c:	5200 	movi	r1, 0
    c15e:	1499 	cmpeq	r2, r2, r1
    c160:	5200 	movi	r1, 0
    c162:	534a 	movhi	r1, 74
    c164:	4440 	st	0(r1), r2
}
    c166:	35c0 	ld	r2, 0(r7)
    c168:	3dc1 	ld	r6, 2(r7)
    c16a:	3bc2 	ld	r5, 4(r7)
    c16c:	2fc6 	addi	r7, r7, 6
    c16e:	a143 	jmp	r5

0000c170 <schedule>:

void schedule()
{
    c170:	2ffa 	addi	r7, r7, -6
    c172:	4bc2 	st	4(r7), r5
    c174:	4dc1 	st	2(r7), r6
    c176:	2dc2 	addi	r6, r7, 2
    c178:	45c0 	st	0(r7), r2
  //update_sched_data_rr();
  remaining_quantum--;
    c17a:	5238 	movi	r1, 56
    c17c:	5380 	movhi	r1, -128
    c17e:	3240 	ld	r1, 0(r1)
    c180:	247f 	addi	r2, r1, -1
    c182:	5238 	movi	r1, 56
    c184:	5380 	movhi	r1, -128
    c186:	4440 	st	0(r1), r2
  
  //if (needs_sched_rr())
  if (remaining_quantum <= 0) 
    c188:	5238 	movi	r1, 56
    c18a:	5380 	movhi	r1, -128
    c18c:	3440 	ld	r2, 0(r1)
    c18e:	5200 	movi	r1, 0
    c190:	1289 	cmple	r1, r2, r1
    c192:	620f 	bz	r1, 32
  {
    //sched_next_rr();
      remaining_quantum=DEFAULT_QUANTUM;
    c194:	5438 	movi	r2, 56
    c196:	5580 	movhi	r2, -128
    c198:	520a 	movi	r1, 10
    c19a:	4280 	st	0(r2), r1

      task_switch();
    c19c:	52e8 	movi	r1, -24
    c19e:	53c0 	movhi	r1, -64
    c1a0:	aa44 	jal	r5, r1
      running = !running;
    c1a2:	5200 	movi	r1, 0
    c1a4:	534a 	movhi	r1, 74
    c1a6:	3440 	ld	r2, 0(r1)
    c1a8:	5200 	movi	r1, 0
    c1aa:	1499 	cmpeq	r2, r2, r1
    c1ac:	5200 	movi	r1, 0
    c1ae:	534a 	movhi	r1, 74
    c1b0:	4440 	st	0(r1), r2
  }
  
   __asm__ (  
    c1b2:	3dc0 	ld	r6, 0(r7)
    c1b4:	3bc1 	ld	r5, 2(r7)
    c1b6:	2fc6 	addi	r7, r7, 6
    c1b8:	a0c3 	jmp	r3
            "ld	r6, 0(r7)\n\t"
            "ld	r5, 2(r7)\n\t"
            "addi r7, r7, 6\n\t"
            "jmp r3\n\t"
            : 
            : );
  
}
    c1ba:	35c0 	ld	r2, 0(r7)
    c1bc:	3dc1 	ld	r6, 2(r7)
    c1be:	3bc2 	ld	r5, 4(r7)
    c1c0:	2fc6 	addi	r7, r7, 6
    c1c2:	a143 	jmp	r5

0000c1c4 <main>:
/*
void init_sched() {
    running = 0;
    //correletras.register_esp = ;
   // fibonacci.register_esp = ;
}

void init_interrupts() {
    __asm__ (  
            "ei\n\t"
            : 
            : );
}*/

int main (void) {
    c1c4:	2ffa 	addi	r7, r7, -6
    c1c6:	4bc2 	st	4(r7), r5
    c1c8:	4dc1 	st	2(r7), r6
    c1ca:	2dc2 	addi	r6, r7, 2
    c1cc:	45c0 	st	0(r7), r2

    //init_sched();
    running = 0;
    c1ce:	5400 	movi	r2, 0
    c1d0:	554a 	movhi	r2, 74
    c1d2:	5200 	movi	r1, 0
    c1d4:	4280 	st	0(r2), r1
    
    //init_interrupts();
    __asm__ (  
    c1d6:	f020 	ei	
            "ei\n\t"
            : 
            : );
    
    //run_first_program();
    
    while(1);
    c1d8:	5a00 	movi	r5, 0
    c1da:	6afe 	bz	r5, -2

temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .sysdata	00000000 .sysdata
00008000 l       .sysdata	00000000 interrupts_vector
00008008 l       .sysdata	00000000 exceptions_vector
00008024 l       .sysdata	00000000 call_sys_vector
00008034 g     O .sysdata	00000002 correletras_esp
00008036 g     O .sysdata	00000002 fibonacci_esp
00008038 g     O .sysdata	00000002 remaining_quantum


Disassembly of section .sysdata:

00008000 <interrupts_vector>:
    8000:	c0c4 	stf	8(r3), f0
    8002:	c016 	stf	44(r0), f0
    8004:	c016 	stf	44(r0), f0
    8006:	c0e6 	stf	-52(r3), f0

00008008 <exceptions_vector>:
    8008:	c018 	stf	48(r0), f0
    800a:	c018 	stf	48(r0), f0
    800c:	c01a 	stf	52(r0), f0
    800e:	c01a 	stf	52(r0), f0
    8010:	c018 	stf	48(r0), f0
    8012:	c018 	stf	48(r0), f0
    8014:	c01c 	stf	56(r0), f0
    8016:	c01c 	stf	56(r0), f0
    8018:	c01c 	stf	56(r0), f0
    801a:	c01c 	stf	56(r0), f0
    801c:	c018 	stf	48(r0), f0
    801e:	c018 	stf	48(r0), f0
    8020:	c018 	stf	48(r0), f0
    8022:	c018 	stf	48(r0), f0

00008024 <call_sys_vector>:
    8024:	c01a 	stf	52(r0), f0
    8026:	c01a 	stf	52(r0), f0
    8028:	c01a 	stf	52(r0), f0
    802a:	c01a 	stf	52(r0), f0
    802c:	c01a 	stf	52(r0), f0
    802e:	c01a 	stf	52(r0), f0
    8030:	c01a 	stf	52(r0), f0
    8032:	c01a 	stf	52(r0), f0

00008034 <correletras_esp>:
    8034:	24c6                                        .$

00008036 <fibonacci_esp>:
    8036:	40be                                        .@

00008038 <remaining_quantum>:
    8038:	0001                                        ..
