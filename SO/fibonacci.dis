
temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f0c paddr 0x00007f0c align 2**0
         filesz 0x0000012a memsz 0x0000012a flags rw-
    LOAD off    0x0000012a vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000180 vaddr 0x0000aa00 paddr 0x0000aa00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x0000018c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x00000240 memsz 0x00000240 flags r-x
    LOAD off    0x000003cc vaddr 0x0000d000 paddr 0x0000d000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000c4a vaddr 0x0000f000 paddr 0x0000f000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000240  0000c000  0000c000  0000018c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  0000d000  0000d000  000003cc  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  0000f000  0000f000  00000c4a  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      00000036  00008000  00008000  000000f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  0000a000  0000a000  0000012a  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  0000aa00  0000aa00  0000018c  2**4  ALLOC
  6 .stab         000010c8  0000aa40  0000aa40  00000dac  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000007e7  0000bb08  0000bb08  00001e74  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000f000 l    d  .userFibonacci	00000000 .userFibonacci
0000f012 l       .userFibonacci	00000000 __pol1
0000f01c l       .userFibonacci	00000000 __pol2
0000f04c g     F .userFibonacci	0000001e write_7segments
0000f036 g     F .userFibonacci	00000016 read_switchs
0000f0be g     F .userFibonacci	000000a2 mainF
0000f06a g     F .userFibonacci	00000054 fibonacci_recursiu
0000f000 g     F .userFibonacci	00000036 read_key_bloq


Disassembly of section .userFibonacci:

0000f000 <read_key_bloq>:
* Espera a que se pulse un pulsador (KEY) en la placa         *
* y devuelve el numero del pulsador apretado cuando se suelta *
**************************************************************/ 
int read_key_bloq (void)
{
    f000:	2ff0 	addi	r7, r7, -16
    f002:	4bc7 	st	14(r7), r5
    f004:	4dc6 	st	12(r7), r6
    f006:	2dcc 	addi	r6, r7, 12
    f008:	45c1 	st	2(r7), r2
    f00a:	47c0 	st	0(r7), r3
  // espera a que se pulse un pulsador y devuelve el numero del pulsador apretado.
  int res,aux1,aux2,aux3;

    /*
    polling1: in   r3, 7        ; leemos el estado de los pulsadores
              not  r3, r3       ; invertimos los bits ya que los pulsadores son activos a 0
              movi r1, 0x0F     ; mascara para quedarnos con los 4 bits de menor peso
              and  r1, r3, r1   ; nos quedamos con los 4 bits de los pulsadores
              bz   r1, polling1 ; si todos valen 0 nos quedamos esperando (bloqueando) a que se pulse uno. 
    pooling2: in   r3, 7        ; volvemos a leer el estado de los pulsadores
              not  r3, r3       ;
              movi r2, 0x0F     ;
              and  r2, r3, r2   ; nos quedamos con los 4 bits ya que no sabemos como esta implementado el registro hardware de los pulsadores
              bnz  r2, polling2 ; y esperamos hasta que no se pulse ninguno
    */

__asm__ (  
    f00c:	37bd 	ld	r3, -6(r6)
    f00e:	35be 	ld	r2, -4(r6)
    f010:	33bf 	ld	r1, -2(r6)

0000f012 <__pol1>:
    f012:	7607 	in	r3, 7
    f014:	06d8 	not	r3, r3
    f016:	520f 	movi	r1, 15
    f018:	02c1 	and	r1, r3, r1
    f01a:	62fb 	bz	r1, -8

0000f01c <__pol2>:
    f01c:	7607 	in	r3, 7
    f01e:	06d8 	not	r3, r3
    f020:	540f 	movi	r2, 15
    f022:	04c2 	and	r2, r3, r2
    f024:	65fb 	bnz	r2, -8
    f026:	43bc 	st	-8(r6), r1
        "__pol1: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %0, 15\n\t"
        "and %0, %1, %0\n\t"
        "bz %0, __pol1\n\t"      
        "__pol2: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %2, 15\n\t"
        "and %2, %1, %2\n\t"
        "bnz %2, __pol2\n\t"
        : "=r" (res)
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3),
          "i" (7));              // Puerto 7 => Registro con el estado de los pulsadores (KEY)

    return res;
    f028:	33bc 	ld	r1, -8(r6)
}
    f02a:	35c1 	ld	r2, 2(r7)
    f02c:	37c0 	ld	r3, 0(r7)
    f02e:	3dc6 	ld	r6, 12(r7)
    f030:	3bc7 	ld	r5, 14(r7)
    f032:	2fd0 	addi	r7, r7, 16
    f034:	a143 	jmp	r5

0000f036 <read_switchs>:


/************************************************************
* Devuelve el estado actual de los interruptores (switch)   *
* de la placa DE1                                           *
************************************************************/ 
unsigned int read_switchs(void)
{
    f036:	2ffa 	addi	r7, r7, -6
    f038:	4bc2 	st	4(r7), r5
    f03a:	4dc1 	st	2(r7), r6
    f03c:	2dc2 	addi	r6, r7, 2
  unsigned int res;

  __asm__ ( "in %0, %1" 
    f03e:	7208 	in	r1, 8
    f040:	43bf 	st	-2(r6), r1
          : "=r" (res)
          : "i" (8));         // Puerto 8 => registro con el estado de los interruptores (SWITCH)

  return res;
    f042:	33bf 	ld	r1, -2(r6)
}
    f044:	3dc1 	ld	r6, 2(r7)
    f046:	3bc2 	ld	r5, 4(r7)
    f048:	2fc6 	addi	r7, r7, 6
    f04a:	a143 	jmp	r5

0000f04c <write_7segments>:
 

/*************************************************************
* Escribe en los visores 7 segmentos un valor hexadecimal    *
* y determina que visores estÃ¡n encendidos y cuales apagados *
*************************************************************/ 
int write_7segments(int valor, char control)
{
    f04c:	2ff8 	addi	r7, r7, -8
    f04e:	4bc3 	st	6(r7), r5
    f050:	4dc2 	st	4(r7), r6
    f052:	2dc4 	addi	r6, r7, 4
    f054:	45c0 	st	0(r7), r2
    int res;

    __asm__ (
    f056:	d586 	ldb	r2, 6(r6)
    f058:	3382 	ld	r1, 4(r6)
    f05a:	7509 	out	9, r2
    f05c:	730a 	out	10, r1
        "out %0, %1\n\t"      // apagamos/encendemos los visores
        "out %2, %3\n\t"      // mostramos el valor
        : /* sin salidas*/
        : "i" (9),            // Puerto 9 => Control visores
          "r" (control),
          "i" (10),           // Puerto 10 => Valor visores
          "r" (valor));

    return res;
    f05e:	33bf 	ld	r1, -2(r6)
}
    f060:	35c0 	ld	r2, 0(r7)
    f062:	3dc2 	ld	r6, 4(r7)
    f064:	3bc3 	ld	r5, 6(r7)
    f066:	2fc8 	addi	r7, r7, 8
    f068:	a143 	jmp	r5

0000f06a <fibonacci_recursiu>:


/* key codes */
#define KEY3      0x08
#define KEY2      0x04
#define KEY1      0x02
#define KEY0      0x01


unsigned int fibonacci_recursiu(unsigned int n)
{
    f06a:	2ff6 	addi	r7, r7, -10
    f06c:	4bc4 	st	8(r7), r5
    f06e:	4dc3 	st	6(r7), r6
    f070:	2dc6 	addi	r6, r7, 6
    f072:	45c1 	st	2(r7), r2
    f074:	47c0 	st	0(r7), r3
    if (n<2)
    f076:	3382 	ld	r1, 4(r6)
    f078:	5401 	movi	r2, 1
    f07a:	126a 	cmpleu	r1, r1, r2
    f07c:	6204 	bz	r1, 10
        return n;
    f07e:	3382 	ld	r1, 4(r6)
    f080:	43bf 	st	-2(r6), r1
    f082:	5a00 	movi	r5, 0
    f084:	6a15 	bz	r5, 44
    else
        return fibonacci_recursiu(n-1) + fibonacci_recursiu(n-2);
    f086:	3382 	ld	r1, 4(r6)
    f088:	247f 	addi	r2, r1, -1
    f08a:	2ffe 	addi	r7, r7, -2
    f08c:	23c0 	addi	r1, r7, 0
    f08e:	4440 	st	0(r1), r2
    f090:	526a 	movi	r1, 106
    f092:	53f0 	movhi	r1, -16
    f094:	aa44 	jal	r5, r1
    f096:	2fc2 	addi	r7, r7, 2
    f098:	2640 	addi	r3, r1, 0
    f09a:	3382 	ld	r1, 4(r6)
    f09c:	247e 	addi	r2, r1, -2
    f09e:	2ffe 	addi	r7, r7, -2
    f0a0:	23c0 	addi	r1, r7, 0
    f0a2:	4440 	st	0(r1), r2
    f0a4:	526a 	movi	r1, 106
    f0a6:	53f0 	movhi	r1, -16
    f0a8:	aa44 	jal	r5, r1
    f0aa:	2fc2 	addi	r7, r7, 2
    f0ac:	06e1 	add	r3, r3, r1
    f0ae:	47bf 	st	-2(r6), r3
    f0b0:	33bf 	ld	r1, -2(r6)
}
    f0b2:	35c1 	ld	r2, 2(r7)
    f0b4:	37c0 	ld	r3, 0(r7)
    f0b6:	3dc3 	ld	r6, 6(r7)
    f0b8:	3bc4 	ld	r5, 8(r7)
    f0ba:	2fca 	addi	r7, r7, 10
    f0bc:	a143 	jmp	r5

0000f0be <mainF>:

/*
 Muestra el valor de la secuencia de fibonaccio (en hexadecimal) por los visores de la placa
 a) calcula el valor de fibonacci de forma recursiva:
    Si se pulsa KEY1 se llama al fibonacci recursivo con el valor natural que este codificado en los 4 SWITCH de menor peso.

 b) calcula el valor del fibonacci de forma iterativa paso a paso
    Si se pulsa KEY3 se ponen la sucecions al inicio (primer valor)
    cada vez que se pulsa KEY2 muestra el siguiente valor de la sucesion
*/

int mainF (void)
{
    f0be:	2ff0 	addi	r7, r7, -16
    f0c0:	4bc7 	st	14(r7), r5
    f0c2:	4dc6 	st	12(r7), r6
    f0c4:	2dcc 	addi	r6, r7, 12
    f0c6:	45c0 	st	0(r7), r2
    int pulsador;
    unsigned int interruptores;
    int fibonacci=0, anterior=0, actual=1;
    f0c8:	5200 	movi	r1, 0
    f0ca:	43bd 	st	-6(r6), r1
    f0cc:	5200 	movi	r1, 0
    f0ce:	43be 	st	-4(r6), r1
    f0d0:	5201 	movi	r1, 1
    f0d2:	43bf 	st	-2(r6), r1

    write_7segments(fibonacci, 0x0F);
    f0d4:	2ffc 	addi	r7, r7, -4
    f0d6:	25c0 	addi	r2, r7, 0
    f0d8:	33bd 	ld	r1, -6(r6)
    f0da:	4280 	st	0(r2), r1
    f0dc:	520f 	movi	r1, 15
    f0de:	e282 	stb	2(r2), r1
    f0e0:	524c 	movi	r1, 76
    f0e2:	53f0 	movhi	r1, -16
    f0e4:	aa44 	jal	r5, r1
    f0e6:	2fc4 	addi	r7, r7, 4
    for (;;) {
        pulsador=read_key_bloq();
    f0e8:	5200 	movi	r1, 0
    f0ea:	53f0 	movhi	r1, -16
    f0ec:	aa44 	jal	r5, r1
    f0ee:	43bb 	st	-10(r6), r1
        if (pulsador==KEY3) { //reset para el fibonacci interativo
    f0f0:	35bb 	ld	r2, -10(r6)
    f0f2:	5208 	movi	r1, 8
    f0f4:	1299 	cmpeq	r1, r2, r1
    f0f6:	6206 	bz	r1, 14
            fibonacci=0;
    f0f8:	5200 	movi	r1, 0
    f0fa:	43bd 	st	-6(r6), r1
            anterior=0;
    f0fc:	5200 	movi	r1, 0
    f0fe:	43be 	st	-4(r6), r1
            actual=1;
    f100:	5201 	movi	r1, 1
    f102:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY2) { //siguiente sucesion del fibonacci iterativo
    f104:	33bb 	ld	r1, -10(r6)
    f106:	5404 	movi	r2, 4
    f108:	125a 	cmpeq	r1, r1, r2
    f10a:	6208 	bz	r1, 18
            fibonacci=actual+anterior;
    f10c:	35bf 	ld	r2, -2(r6)
    f10e:	33be 	ld	r1, -4(r6)
    f110:	02a1 	add	r1, r2, r1
    f112:	43bd 	st	-6(r6), r1
            anterior=actual;
    f114:	33bf 	ld	r1, -2(r6)
    f116:	43be 	st	-4(r6), r1
            actual=fibonacci;
    f118:	33bd 	ld	r1, -6(r6)
    f11a:	43bf 	st	-2(r6), r1
        }
        if (pulsador==KEY1) { //llamada al fibonacci recursivo
    f11c:	33bb 	ld	r1, -10(r6)
    f11e:	5402 	movi	r2, 2
    f120:	125a 	cmpeq	r1, r1, r2
    f122:	6211 	bz	r1, 36
            interruptores=read_switchs();
    f124:	5236 	movi	r1, 54
    f126:	53f0 	movhi	r1, -16
    f128:	aa44 	jal	r5, r1
    f12a:	43bc 	st	-8(r6), r1
            interruptores=interruptores & 0x000F; // limitamos el valor a 15 para que los numeros grandes no desborden la pila en las llamadas recursivas
    f12c:	35bc 	ld	r2, -8(r6)
    f12e:	520f 	movi	r1, 15
    f130:	0281 	and	r1, r2, r1
    f132:	43bc 	st	-8(r6), r1
            fibonacci=fibonacci_recursiu(interruptores);
    f134:	2ffe 	addi	r7, r7, -2
    f136:	25c0 	addi	r2, r7, 0
    f138:	33bc 	ld	r1, -8(r6)
    f13a:	4280 	st	0(r2), r1
    f13c:	526a 	movi	r1, 106
    f13e:	53f0 	movhi	r1, -16
    f140:	aa44 	jal	r5, r1
    f142:	2fc2 	addi	r7, r7, 2
    f144:	43bd 	st	-6(r6), r1
        }
        write_7segments(fibonacci, 0x0F);
    f146:	2ffc 	addi	r7, r7, -4
    f148:	25c0 	addi	r2, r7, 0
    f14a:	33bd 	ld	r1, -6(r6)
    f14c:	4280 	st	0(r2), r1
    f14e:	520f 	movi	r1, 15
    f150:	e282 	stb	2(r2), r1
    f152:	524c 	movi	r1, 76
    f154:	53f0 	movhi	r1, -16
    f156:	aa44 	jal	r5, r1
    f158:	2fc4 	addi	r7, r7, 4
    }
    f15a:	5ae8 	movi	r5, -24
    f15c:	5bf0 	movhi	r5, -16
    f15e:	a143 	jmp	r5

temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f0c paddr 0x00007f0c align 2**0
         filesz 0x0000012a memsz 0x0000012a flags rw-
    LOAD off    0x0000012a vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000180 vaddr 0x0000aa00 paddr 0x0000aa00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x0000018c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x00000240 memsz 0x00000240 flags r-x
    LOAD off    0x000003cc vaddr 0x0000d000 paddr 0x0000d000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000c4a vaddr 0x0000f000 paddr 0x0000f000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000240  0000c000  0000c000  0000018c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  0000d000  0000d000  000003cc  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  0000f000  0000f000  00000c4a  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      00000036  00008000  00008000  000000f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  0000a000  0000a000  0000012a  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  0000aa00  0000aa00  0000018c  2**4  ALLOC
  6 .stab         000010c8  0000aa40  0000aa40  00000dac  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000007e7  0000bb08  0000bb08  00001e74  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


