
temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00004000 l    d  .userFibonacci	00000000 .userFibonacci
00004012 l       .userFibonacci	00000000 __pol1
0000401c l       .userFibonacci	00000000 __pol2
0000404c g     F .userFibonacci	0000001e write_7segments
00004036 g     F .userFibonacci	00000016 read_switchs
000040be g     F .userFibonacci	000000a2 mainF
0000406a g     F .userFibonacci	00000054 fibonacci_recursiu
00004000 g     F .userFibonacci	00000036 read_key_bloq


Disassembly of section .userFibonacci:

00004000 <read_key_bloq>:
* Espera a que se pulse un pulsador (KEY) en la placa         *
* y devuelve el numero del pulsador apretado cuando se suelta *
**************************************************************/ 
int read_key_bloq (void)
{
    4000:	2ff0 	addi	r7, r7, -16
    4002:	4bc7 	st	14(r7), r5
    4004:	4dc6 	st	12(r7), r6
    4006:	2dcc 	addi	r6, r7, 12
    4008:	45c1 	st	2(r7), r2
    400a:	47c0 	st	0(r7), r3
  // espera a que se pulse un pulsador y devuelve el numero del pulsador apretado.
  int res,aux1,aux2,aux3;

    /*
    polling1: in   r3, 7        ; leemos el estado de los pulsadores
              not  r3, r3       ; invertimos los bits ya que los pulsadores son activos a 0
              movi r1, 0x0F     ; mascara para quedarnos con los 4 bits de menor peso
              and  r1, r3, r1   ; nos quedamos con los 4 bits de los pulsadores
              bz   r1, polling1 ; si todos valen 0 nos quedamos esperando (bloqueando) a que se pulse uno. 
    pooling2: in   r3, 7        ; volvemos a leer el estado de los pulsadores
              not  r3, r3       ;
              movi r2, 0x0F     ;
              and  r2, r3, r2   ; nos quedamos con los 4 bits ya que no sabemos como esta implementado el registro hardware de los pulsadores
              bnz  r2, polling2 ; y esperamos hasta que no se pulse ninguno
    */

__asm__ (  
    400c:	37bd 	ld	r3, -6(r6)
    400e:	35be 	ld	r2, -4(r6)
    4010:	33bf 	ld	r1, -2(r6)

00004012 <__pol1>:
    4012:	7607 	in	r3, 7
    4014:	06d8 	not	r3, r3
    4016:	520f 	movi	r1, 15
    4018:	02c1 	and	r1, r3, r1
    401a:	62fb 	bz	r1, -8

0000401c <__pol2>:
    401c:	7607 	in	r3, 7
    401e:	06d8 	not	r3, r3
    4020:	540f 	movi	r2, 15
    4022:	04c2 	and	r2, r3, r2
    4024:	65fb 	bnz	r2, -8
    4026:	43bc 	st	-8(r6), r1
        "__pol1: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %0, 15\n\t"
        "and %0, %1, %0\n\t"
        "bz %0, __pol1\n\t"      
        "__pol2: in %1, %4\n\t"
        "not %1, %1\n\t"
        "movi %2, 15\n\t"
        "and %2, %1, %2\n\t"
        "bnz %2, __pol2\n\t"
        : "=r" (res)
        : "r" (aux1),
          "r" (aux2),
          "r" (aux3),
          "i" (7));              // Puerto 7 => Registro con el estado de los pulsadores (KEY)

    return res;
    4028:	33bc 	ld	r1, -8(r6)
}
    402a:	35c1 	ld	r2, 2(r7)
    402c:	37c0 	ld	r3, 0(r7)
    402e:	3dc6 	ld	r6, 12(r7)
    4030:	3bc7 	ld	r5, 14(r7)
    4032:	2fd0 	addi	r7, r7, 16
    4034:	a143 	jmp	r5

00004036 <read_switchs>:


/************************************************************
* Devuelve el estado actual de los interruptores (switch)   *
* de la placa DE1                                           *
************************************************************/ 
unsigned int read_switchs(void)
{
    4036:	2ffa 	addi	r7, r7, -6
    4038:	4bc2 	st	4(r7), r5
    403a:	4dc1 	st	2(r7), r6
    403c:	2dc2 	addi	r6, r7, 2
  unsigned int res;

  __asm__ ( "in %0, %1" 
    403e:	7208 	in	r1, 8
    4040:	43bf 	st	-2(r6), r1
          : "=r" (res)
          : "i" (8));         // Puerto 8 => registro con el estado de los interruptores (SWITCH)

  return res;
    4042:	33bf 	ld	r1, -2(r6)
}
    4044:	3dc1 	ld	r6, 2(r7)
    4046:	3bc2 	ld	r5, 4(r7)
    4048:	2fc6 	addi	r7, r7, 6
    404a:	a143 	jmp	r5

0000404c <write_7segments>:
 

/*************************************************************
* Escribe en los visores 7 segmentos un valor hexadecimal    *
* y determina que visores estÃ¡n encendidos y cuales apagados *
*************************************************************/ 
int write_7segments(int valor, char control)
{
    404c:	2ff8 	addi	r7, r7, -8
    404e:	4bc3 	st	6(r7), r5
    4050:	4dc2 	st	4(r7), r6
    4052:	2dc4 	addi	r6, r7, 4
    4054:	45c0 	st	0(r7), r2
    int res;

    __asm__ (
    4056:	d586 	ldb	r2, 6(r6)
    4058:	3382 	ld	r1, 4(r6)
    405a:	7509 	out	9, r2
    405c:	730a 	out	10, r1
        "out %0, %1\n\t"      // apagamos/encendemos los visores
        "out %2, %3\n\t"      // mostramos el valor
        : /* sin salidas*/
        : "i" (9),            // Puerto 9 => Control visores
          "r" (control),
          "i" (10),           // Puerto 10 => Valor visores
          "r" (valor));

    return res;
    405e:	33bf 	ld	r1, -2(r6)
}
    4060:	35c0 	ld	r2, 0(r7)
    4062:	3dc2 	ld	r6, 4(r7)
    4064:	3bc3 	ld	r5, 6(r7)
    4066:	2fc8 	addi	r7, r7, 8
    4068:	a143 	jmp	r5

0000406a <fibonacci_recursiu>:


/* key codes */
#define KEY3      0x08
#define KEY2      0x04
#define KEY1      0x02
#define KEY0      0x01


unsigned int fibonacci_recursiu(unsigned int n)
{
    406a:	2ff6 	addi	r7, r7, -10
    406c:	4bc4 	st	8(r7), r5
    406e:	4dc3 	st	6(r7), r6
    4070:	2dc6 	addi	r6, r7, 6
    4072:	45c1 	st	2(r7), r2
    4074:	47c0 	st	0(r7), r3
    if (n<2)
    4076:	3382 	ld	r1, 4(r6)
    4078:	5401 	movi	r2, 1
    407a:	126a 	cmpleu	r1, r1, r2
    407c:	6204 	bz	r1, 10
        return n;
    407e:	3382 	ld	r1, 4(r6)
    4080:	43bf 	st	-2(r6), r1
    4082:	5a00 	movi	r5, 0
    4084:	6a15 	bz	r5, 44
    else
        return fibonacci_recursiu(n-1) + fibonacci_recursiu(n-2);
    4086:	3382 	ld	r1, 4(r6)
    4088:	247f 	addi	r2, r1, -1
    408a:	2ffe 	addi	r7, r7, -2
    408c:	23c0 	addi	r1, r7, 0
    408e:	4440 	st	0(r1), r2
    4090:	526a 	movi	r1, 106
    4092:	5340 	movhi	r1, 64
    4094:	aa44 	jal	r5, r1
    4096:	2fc2 	addi	r7, r7, 2
    4098:	2640 	addi	r3, r1, 0
    409a:	3382 	ld	r1, 4(r6)
    409c:	247e 	addi	r2, r1, -2
    409e:	2ffe 	addi	r7, r7, -2
    40a0:	23c0 	addi	r1, r7, 0
    40a2:	4440 	st	0(r1), r2
    40a4:	526a 	movi	r1, 106
    40a6:	5340 	movhi	r1, 64
    40a8:	aa44 	jal	r5, r1
    40aa:	2fc2 	addi	r7, r7, 2
    40ac:	06e1 	add	r3, r3, r1
    40ae:	47bf 	st	-2(r6), r3
    40b0:	33bf 	ld	r1, -2(r6)
}
    40b2:	35c1 	ld	r2, 2(r7)
    40b4:	37c0 	ld	r3, 0(r7)
    40b6:	3dc3 	ld	r6, 6(r7)
    40b8:	3bc4 	ld	r5, 8(r7)
    40ba:	2fca 	addi	r7, r7, 10
    40bc:	a143 	jmp	r5

000040be <mainF>:
    40be:	2ff0 	addi	r7, r7, -16
    40c0:	4bc7 	st	14(r7), r5
    40c2:	4dc6 	st	12(r7), r6
    40c4:	2dcc 	addi	r6, r7, 12
    40c6:	45c0 	st	0(r7), r2
    40c8:	5200 	movi	r1, 0
    40ca:	43bd 	st	-6(r6), r1
    40cc:	5200 	movi	r1, 0
    40ce:	43be 	st	-4(r6), r1
    40d0:	5201 	movi	r1, 1
    40d2:	43bf 	st	-2(r6), r1
    40d4:	2ffc 	addi	r7, r7, -4
    40d6:	25c0 	addi	r2, r7, 0
    40d8:	33bd 	ld	r1, -6(r6)
    40da:	4280 	st	0(r2), r1
    40dc:	520f 	movi	r1, 15
    40de:	e282 	stb	2(r2), r1
    40e0:	524c 	movi	r1, 76
    40e2:	5340 	movhi	r1, 64
    40e4:	aa44 	jal	r5, r1
    40e6:	2fc4 	addi	r7, r7, 4
    40e8:	5200 	movi	r1, 0
    40ea:	5340 	movhi	r1, 64
    40ec:	aa44 	jal	r5, r1
    40ee:	43bb 	st	-10(r6), r1
    40f0:	35bb 	ld	r2, -10(r6)
    40f2:	5208 	movi	r1, 8
    40f4:	1299 	cmpeq	r1, r2, r1
    40f6:	6206 	bz	r1, 14
    40f8:	5200 	movi	r1, 0
    40fa:	43bd 	st	-6(r6), r1
    40fc:	5200 	movi	r1, 0
    40fe:	43be 	st	-4(r6), r1
    4100:	5201 	movi	r1, 1
    4102:	43bf 	st	-2(r6), r1
    4104:	33bb 	ld	r1, -10(r6)
    4106:	5404 	movi	r2, 4
    4108:	125a 	cmpeq	r1, r1, r2
    410a:	6208 	bz	r1, 18
    410c:	35bf 	ld	r2, -2(r6)
    410e:	33be 	ld	r1, -4(r6)
    4110:	02a1 	add	r1, r2, r1
    4112:	43bd 	st	-6(r6), r1
    4114:	33bf 	ld	r1, -2(r6)
    4116:	43be 	st	-4(r6), r1
    4118:	33bd 	ld	r1, -6(r6)
    411a:	43bf 	st	-2(r6), r1
    411c:	33bb 	ld	r1, -10(r6)
    411e:	5402 	movi	r2, 2
    4120:	125a 	cmpeq	r1, r1, r2
    4122:	6211 	bz	r1, 36
    4124:	5236 	movi	r1, 54
    4126:	5340 	movhi	r1, 64
    4128:	aa44 	jal	r5, r1
    412a:	43bc 	st	-8(r6), r1
    412c:	35bc 	ld	r2, -8(r6)
    412e:	520f 	movi	r1, 15
    4130:	0281 	and	r1, r2, r1
    4132:	43bc 	st	-8(r6), r1
    4134:	2ffe 	addi	r7, r7, -2
    4136:	25c0 	addi	r2, r7, 0
    4138:	33bc 	ld	r1, -8(r6)
    413a:	4280 	st	0(r2), r1
    413c:	526a 	movi	r1, 106
    413e:	5340 	movhi	r1, 64
    4140:	aa44 	jal	r5, r1
    4142:	2fc2 	addi	r7, r7, 2
    4144:	43bd 	st	-6(r6), r1
    4146:	2ffc 	addi	r7, r7, -4
    4148:	25c0 	addi	r2, r7, 0
    414a:	33bd 	ld	r1, -6(r6)
    414c:	4280 	st	0(r2), r1
    414e:	520f 	movi	r1, 15
    4150:	e282 	stb	2(r2), r1
    4152:	524c 	movi	r1, 76
    4154:	5340 	movhi	r1, 64
    4156:	aa44 	jal	r5, r1
    4158:	2fc4 	addi	r7, r7, 4
    415a:	5ae8 	movi	r5, -24
    415c:	5b40 	movhi	r5, 64
    415e:	a143 	jmp	r5

temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:


