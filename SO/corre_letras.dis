
temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f0c paddr 0x00007f0c align 2**0
         filesz 0x0000012a memsz 0x0000012a flags rw-
    LOAD off    0x0000012a vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000180 vaddr 0x0000aa00 paddr 0x0000aa00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x0000018c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x00000240 memsz 0x00000240 flags r-x
    LOAD off    0x000003cc vaddr 0x0000d000 paddr 0x0000d000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000c4a vaddr 0x0000f000 paddr 0x0000f000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000240  0000c000  0000c000  0000018c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  0000d000  0000d000  000003cc  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  0000f000  0000f000  00000c4a  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      00000036  00008000  00008000  000000f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  0000a000  0000a000  0000012a  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  0000aa00  0000aa00  0000018c  2**4  ALLOC
  6 .stab         000010c8  0000aa40  0000aa40  00000dac  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000007e7  0000bb08  0000bb08  00001e74  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000d000 l    d  .userCorreletras	00000000 .userCorreletras
0000d01e l       .userCorreletras	00000000 __repe
0000d4c6 g     F .userCorreletras	000003b8 mainC
0000d192 g     F .userCorreletras	00000334 reset_corre_letras
0000d0f6 g     F .userCorreletras	0000009c write
0000d0be g     F .userCorreletras	00000038 strlen_s
0000d074 g     F .userCorreletras	0000004a mostrar_nueva_posicion
0000d032 g     F .userCorreletras	00000042 borrar_letra
0000d000 g     F .userCorreletras	00000032 clear_screen


Disassembly of section .userCorreletras:

0000d000 <clear_screen>:
* Borra la pantalla: Escribe 80x30 caracteres (espacios con   *
* fondo negro) en la memoria de la pantalla (0xA000)          *
**************************************************************/ 
void clear_screen(void)
{
    d000:	2ff2 	addi	r7, r7, -14
    d002:	4bc6 	st	12(r7), r5
    d004:	4dc5 	st	10(r7), r6
    d006:	2dca 	addi	r6, r7, 10
    d008:	45c1 	st	2(r7), r2
    d00a:	47c0 	st	0(r7), r3
    int aux1, aux2, aux3;

    __asm__ (  
    d00c:	37bd 	ld	r3, -6(r6)
    d00e:	35be 	ld	r2, -4(r6)
    d010:	33bf 	ld	r1, -2(r6)
    d012:	5600 	movi	r3, 0
    d014:	57a0 	movhi	r3, -96
    d016:	5460 	movi	r2, 96
    d018:	5509 	movhi	r2, 9
    d01a:	5220 	movi	r1, 32
    d01c:	5300 	movhi	r1, 0

0000d01e <__repe>:
    d01e:	42c0 	st	0(r3), r1
    d020:	26c2 	addi	r3, r3, 2
    d022:	24bf 	addi	r2, r2, -1
    d024:	65fc 	bnz	r2, -6
            "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
            "movhi %0, hi(0xA000)\n\t"
            "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
            "movhi %1, hi(2400)\n\t"
            "movi  %2, lo(0x0020)\n\t"
            "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
            "__repe: st 0(%0), %2\n\t"
            "addi  %0, %0,2\n\t"
            "addi  %1, %1,-1\n\t"
            "bnz   %1, __repe\n\t"
            : /* sin salidas*/
            : "r" (aux1),
              "r" (aux2),
              "r" (aux3));  
}
    d026:	35c1 	ld	r2, 2(r7)
    d028:	37c0 	ld	r3, 0(r7)
    d02a:	3dc5 	ld	r6, 10(r7)
    d02c:	3bc6 	ld	r5, 12(r7)
    d02e:	2fce 	addi	r7, r7, 14
    d030:	a143 	jmp	r5

0000d032 <borrar_letra>:


/**************************************************************
* Borra un caracter en la pantalla: Escribe un espacio con    *
* fondo negro en la fila y columnas indicadas                 *
**************************************************************/ 
void borrar_letra(int fila, int col)
{
    d032:	2ff4 	addi	r7, r7, -12
    d034:	4bc5 	st	10(r7), r5
    d036:	4dc4 	st	8(r7), r6
    d038:	2dc8 	addi	r6, r7, 8
    d03a:	41c1 	st	2(r7), r0
    d03c:	45c0 	st	0(r7), r2
    int valor;
    int pos;

    valor=0x0020;               //un espacio en color negro
    d03e:	5220 	movi	r1, 32
    d040:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;        // cada caracter ocupa 2 bytes de memoria de video
    d042:	3382 	ld	r1, 4(r6)
    d044:	2440 	addi	r2, r1, 0
    d046:	5204 	movi	r1, 4
    d048:	04b1 	sha	r2, r2, r1
    d04a:	5202 	movi	r1, 2
    d04c:	02b1 	sha	r1, r2, r1
    d04e:	04a1 	add	r2, r2, r1
    d050:	3383 	ld	r1, 6(r6)
    d052:	02a1 	add	r1, r2, r1
    d054:	0261 	add	r1, r1, r1
    d056:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;           // la memoria de video empieza en la direccion 0xA000 (40960)
    d058:	33bf 	ld	r1, -2(r6)
    d05a:	5400 	movi	r2, 0
    d05c:	55a0 	movhi	r2, -96
    d05e:	0262 	add	r1, r1, r2
    d060:	43bf 	st	-2(r6), r1

    __asm__ (
    d062:	31bf 	ld	r0, -2(r6)
    d064:	33be 	ld	r1, -4(r6)
    d066:	4200 	st	0(r0), r1
            "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (valor));  
}
    d068:	31c1 	ld	r0, 2(r7)
    d06a:	35c0 	ld	r2, 0(r7)
    d06c:	3dc4 	ld	r6, 8(r7)
    d06e:	3bc5 	ld	r5, 10(r7)
    d070:	2fcc 	addi	r7, r7, 12
    d072:	a143 	jmp	r5

0000d074 <mostrar_nueva_posicion>:


/*******************************************************************
* Muestra un caracter en la pantalla: Escribe el caracter recibido *
* con el color y fondo indicados en la fila y columnas indicadas   *
*******************************************************************/ 
void mostrar_nueva_posicion(int fila, int col, char c, char color)
{
    d074:	2ff4 	addi	r7, r7, -12
    d076:	4bc5 	st	10(r7), r5
    d078:	4dc4 	st	8(r7), r6
    d07a:	2dc8 	addi	r6, r7, 8
    d07c:	41c1 	st	2(r7), r0
    d07e:	45c0 	st	0(r7), r2
    int caracter_compuesto;
    int pos;

    caracter_compuesto=color*256+c;
    d080:	d589 	ldb	r2, 9(r6)
    d082:	5208 	movi	r1, 8
    d084:	04b1 	sha	r2, r2, r1
    d086:	d388 	ldb	r1, 8(r6)
    d088:	02a1 	add	r1, r2, r1
    d08a:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;           // cada caracter ocupa 2 bytes de memoria de video
    d08c:	3382 	ld	r1, 4(r6)
    d08e:	2440 	addi	r2, r1, 0
    d090:	5204 	movi	r1, 4
    d092:	04b1 	sha	r2, r2, r1
    d094:	5202 	movi	r1, 2
    d096:	02b1 	sha	r1, r2, r1
    d098:	04a1 	add	r2, r2, r1
    d09a:	3383 	ld	r1, 6(r6)
    d09c:	02a1 	add	r1, r2, r1
    d09e:	0261 	add	r1, r1, r1
    d0a0:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;              // la memoria de video empieza en la direccion 0xA000 (40960)
    d0a2:	33bf 	ld	r1, -2(r6)
    d0a4:	5400 	movi	r2, 0
    d0a6:	55a0 	movhi	r2, -96
    d0a8:	0262 	add	r1, r1, r2
    d0aa:	43bf 	st	-2(r6), r1

    __asm__ (
    d0ac:	31bf 	ld	r0, -2(r6)
    d0ae:	33be 	ld	r1, -4(r6)
    d0b0:	4200 	st	0(r0), r1
            "st 0(%0), %1"         // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                   // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (caracter_compuesto));  
}
    d0b2:	31c1 	ld	r0, 2(r7)
    d0b4:	35c0 	ld	r2, 0(r7)
    d0b6:	3dc4 	ld	r6, 8(r7)
    d0b8:	3bc5 	ld	r5, 10(r7)
    d0ba:	2fcc 	addi	r7, r7, 12
    d0bc:	a143 	jmp	r5

0000d0be <strlen_s>:


/*****************************************************************
* Devuelve la longitud de una cadena de caracteres *
******************************************************************/ 
int strlen_s(char *str)
{
    d0be:	2ff8 	addi	r7, r7, -8
    d0c0:	4bc3 	st	6(r7), r5
    d0c2:	4dc2 	st	4(r7), r6
    d0c4:	2dc4 	addi	r6, r7, 4
    d0c6:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
    d0c8:	5200 	movi	r1, 0
    d0ca:	43bf 	st	-2(r6), r1
    d0cc:	5a00 	movi	r5, 0
    d0ce:	6a03 	bz	r5, 8
    d0d0:	33bf 	ld	r1, -2(r6)
    d0d2:	2241 	addi	r1, r1, 1
    d0d4:	43bf 	st	-2(r6), r1
    d0d6:	3382 	ld	r1, 4(r6)
    d0d8:	d440 	ldb	r2, 0(r1)
    d0da:	5200 	movi	r1, 0
    d0dc:	1299 	cmpeq	r1, r2, r1
    d0de:	0258 	not	r1, r1
    d0e0:	2242 	addi	r1, r1, 2
    d0e2:	3382 	ld	r1, 4(r6)
    d0e4:	2241 	addi	r1, r1, 1
    d0e6:	4382 	st	4(r6), r1
    d0e8:	65f3 	bnz	r2, -24
  return len;
    d0ea:	33bf 	ld	r1, -2(r6)
}
    d0ec:	35c0 	ld	r2, 0(r7)
    d0ee:	3dc2 	ld	r6, 4(r7)
    d0f0:	3bc3 	ld	r5, 6(r7)
    d0f2:	2fc8 	addi	r7, r7, 8
    d0f4:	a143 	jmp	r5

0000d0f6 <write>:


/*****************************************************************
* Muestra una cadena de caracteres en la pantalla con el color y *
* el fondo indicados empezando la fila y columnas indicadas      *
******************************************************************/ 
int write(int fila, int col, char *buf, int size, char color)
{
    d0f6:	2fee 	addi	r7, r7, -18
    d0f8:	4bc8 	st	16(r7), r5
    d0fa:	4dc7 	st	14(r7), r6
    d0fc:	2dce 	addi	r6, r7, 14
    d0fe:	45c1 	st	2(r7), r2
    d100:	47c0 	st	0(r7), r3
  int i, t;
  int f, c, car;
  t = 0; f = fila; c = col;
    d102:	5200 	movi	r1, 0
    d104:	43bc 	st	-8(r6), r1
    d106:	3382 	ld	r1, 4(r6)
    d108:	43bd 	st	-6(r6), r1
    d10a:	3383 	ld	r1, 6(r6)
    d10c:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
    d10e:	5200 	movi	r1, 0
    d110:	43bb 	st	-10(r6), r1
    d112:	5a78 	movi	r5, 120
    d114:	5bd1 	movhi	r5, -47
    d116:	a143 	jmp	r5
    {
      car = buf[i];
    d118:	35bb 	ld	r2, -10(r6)
    d11a:	3384 	ld	r1, 8(r6)
    d11c:	02a1 	add	r1, r2, r1
    d11e:	d240 	ldb	r1, 0(r1)
    d120:	43bf 	st	-2(r6), r1
      mostrar_nueva_posicion(f, c, car, color);
    d122:	33bf 	ld	r1, -2(r6)
    d124:	2640 	addi	r3, r1, 0
    d126:	2ffa 	addi	r7, r7, -6
    d128:	25c0 	addi	r2, r7, 0
    d12a:	33bd 	ld	r1, -6(r6)
    d12c:	4280 	st	0(r2), r1
    d12e:	33be 	ld	r1, -4(r6)
    d130:	4281 	st	2(r2), r1
    d132:	e684 	stb	4(r2), r3
    d134:	d38c 	ldb	r1, 12(r6)
    d136:	e285 	stb	5(r2), r1
    d138:	5274 	movi	r1, 116
    d13a:	53d0 	movhi	r1, -48
    d13c:	aa44 	jal	r5, r1
    d13e:	2fc6 	addi	r7, r7, 6
      t++;
    d140:	33bc 	ld	r1, -8(r6)
    d142:	2241 	addi	r1, r1, 1
    d144:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
    d146:	35bf 	ld	r2, -2(r6)
    d148:	520a 	movi	r1, 10
    d14a:	1299 	cmpeq	r1, r2, r1
    d14c:	6205 	bz	r1, 12
    d14e:	33bd 	ld	r1, -6(r6)
    d150:	2241 	addi	r1, r1, 1
    d152:	43bd 	st	-6(r6), r1
    d154:	5a00 	movi	r5, 0
    d156:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
    d158:	33bf 	ld	r1, -2(r6)
    d15a:	540d 	movi	r2, 13
    d15c:	125a 	cmpeq	r1, r1, r2
    d15e:	6204 	bz	r1, 10
    d160:	5201 	movi	r1, 1
    d162:	43be 	st	-4(r6), r1
    d164:	5a00 	movi	r5, 0
    d166:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
    d168:	33bf 	ld	r1, -2(r6)
    d16a:	6203 	bz	r1, 8
    d16c:	33be 	ld	r1, -4(r6)
    d16e:	2241 	addi	r1, r1, 1
    d170:	43be 	st	-4(r6), r1
    d172:	33bb 	ld	r1, -10(r6)
    d174:	2241 	addi	r1, r1, 1
    d176:	43bb 	st	-10(r6), r1
    d178:	33bb 	ld	r1, -10(r6)
    d17a:	3585 	ld	r2, 10(r6)
    d17c:	1242 	cmplt	r1, r1, r2
    d17e:	5a18 	movi	r5, 24
    d180:	5bd1 	movhi	r5, -47
    d182:	a341 	jnz	r1, r5
    }

  return t;
    d184:	33bc 	ld	r1, -8(r6)
}
    d186:	35c1 	ld	r2, 2(r7)
    d188:	37c0 	ld	r3, 0(r7)
    d18a:	3dc7 	ld	r6, 14(r7)
    d18c:	3bc8 	ld	r5, 16(r7)
    d18e:	2fd2 	addi	r7, r7, 18
    d190:	a143 	jmp	r5

0000d192 <reset_corre_letras>:




#define ANCHO_PANTALLA  80
#define LIMITE_LETRAS   13

/* colores */
#define NEGRO           0x00
#define BLANCO          0x3F
#define ROJO            0x03
#define VERDE           0x0C
#define AZUL            0x30
#define GRIS_OSCURO     0x15
#define AZUL_CIELO      0x3C
#define AMARILLO        0x0F
#define LILA            0x2A
#define GRIS_CLARO      0x2A
#define GRIS_MUY_CLARO  0x3F

char letras[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M'};
char colores[] = {BLANCO, ROJO, VERDE, AZUL, GRIS_OSCURO, AZUL_CIELO, AMARILLO, LILA, GRIS_CLARO, GRIS_MUY_CLARO, 0x1A, 0X21, 0X2B};
int divisores[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
char mensaje[] = "pulsa 'R' para reiniciar o 'P' para pausa.";

unsigned int tics_timer=1;     //variable global cuyo valor es modificado por la interrupcion de reloj
unsigned int tecla_pulsada=0;  //variable global cuyo valor es modificado por la interrupcion de teclado

struct letra_t
{
    int posicion;    // posicion dentro la linea
    char caracter;   // caracter a mostrar
    char color;      // color caracter

};

#define NUMERO_LETRAS  12
struct letra_t  letra[NUMERO_LETRAS];


void reset_corre_letras(void)
{
    d192:	2fe0 	addi	r7, r7, -32
    d194:	4bcf 	st	30(r7), r5
    d196:	4dce 	st	28(r7), r6
    d198:	2ddc 	addi	r6, r7, 28
    d19a:	5acc 	movi	r5, -52
    d19c:	0fe5 	add	r7, r7, r5
    d19e:	41c3 	st	6(r7), r0
    d1a0:	45c2 	st	4(r7), r2
    d1a2:	47c1 	st	2(r7), r3
    d1a4:	49c0 	st	0(r7), r4
    clear_screen();      // borrar pantalla
    d1a6:	5200 	movi	r1, 0
    d1a8:	53d0 	movhi	r1, -48
    d1aa:	aa44 	jal	r5, r1

    write(15, 19, mensaje, strlen_s(mensaje), ROJO);
    d1ac:	2ffe 	addi	r7, r7, -2
    d1ae:	25c0 	addi	r2, r7, 0
    d1b0:	5234 	movi	r1, 52
    d1b2:	53a0 	movhi	r1, -96
    d1b4:	4280 	st	0(r2), r1
    d1b6:	52be 	movi	r1, -66
    d1b8:	53d0 	movhi	r1, -48
    d1ba:	aa44 	jal	r5, r1
    d1bc:	2fc2 	addi	r7, r7, 2
    d1be:	2640 	addi	r3, r1, 0
    d1c0:	2ff6 	addi	r7, r7, -10
    d1c2:	25c0 	addi	r2, r7, 0
    d1c4:	520f 	movi	r1, 15
    d1c6:	4280 	st	0(r2), r1
    d1c8:	5213 	movi	r1, 19
    d1ca:	4281 	st	2(r2), r1
    d1cc:	5234 	movi	r1, 52
    d1ce:	53a0 	movhi	r1, -96
    d1d0:	4282 	st	4(r2), r1
    d1d2:	4683 	st	6(r2), r3
    d1d4:	5203 	movi	r1, 3
    d1d6:	e288 	stb	8(r2), r1
    d1d8:	52f6 	movi	r1, -10
    d1da:	53d0 	movhi	r1, -48
    d1dc:	aa44 	jal	r5, r1
    d1de:	2fca 	addi	r7, r7, 10
    int i;    
    for (i=0; i<NUMERO_LETRAS; i++) {
    d1e0:	5200 	movi	r1, 0
    d1e2:	43bf 	st	-2(r6), r1
    d1e4:	5aa8 	movi	r5, -88
    d1e6:	5bd4 	movhi	r5, -44
    d1e8:	a143 	jmp	r5
        letra[i].posicion=0;
    d1ea:	35bf 	ld	r2, -2(r6)
    d1ec:	5010 	movi	r0, 16
    d1ee:	51aa 	movhi	r0, -86
    d1f0:	41b8 	st	-16(r6), r0
    d1f2:	520f 	movi	r1, 15
    d1f4:	0258 	not	r1, r1
    d1f6:	2241 	addi	r1, r1, 1
    d1f8:	02b1 	sha	r1, r2, r1
    d1fa:	2680 	addi	r3, r2, 0
    d1fc:	2840 	addi	r4, r1, 0
    d1fe:	520e 	movi	r1, 14
    d200:	0258 	not	r1, r1
    d202:	2241 	addi	r1, r1, 1
    d204:	02f9 	shl	r1, r3, r1
    d206:	43b7 	st	-18(r6), r1
    d208:	5002 	movi	r0, 2
    d20a:	5202 	movi	r1, 2
    d20c:	43b6 	st	-20(r6), r1
    d20e:	0530 	sha	r2, r4, r0
    d210:	31b7 	ld	r0, -18(r6)
    d212:	040a 	or	r2, r0, r2
    d214:	31b6 	ld	r0, -20(r6)
    d216:	02f0 	sha	r1, r3, r0
    d218:	37b8 	ld	r3, -16(r6)
    d21a:	04e1 	add	r2, r3, r1
    d21c:	5200 	movi	r1, 0
    d21e:	4280 	st	0(r2), r1
        letra[i].caracter=letras[i];
    d220:	39bf 	ld	r4, -2(r6)
    d222:	49b9 	st	-14(r6), r4
    d224:	39bf 	ld	r4, -2(r6)
    d226:	5000 	movi	r0, 0
    d228:	51a0 	movhi	r0, -96
    d22a:	520f 	movi	r1, 15
    d22c:	0258 	not	r1, r1
    d22e:	2241 	addi	r1, r1, 1
    d230:	0731 	sha	r3, r4, r1
    d232:	2300 	addi	r1, r4, 0
    d234:	24c0 	addi	r2, r3, 0
    d236:	0221 	add	r1, r0, r1
    d238:	d240 	ldb	r1, 0(r1)
    d23a:	43ba 	st	-12(r6), r1
    d23c:	5010 	movi	r0, 16
    d23e:	51aa 	movhi	r0, -86
    d240:	41b5 	st	-22(r6), r0
    d242:	520f 	movi	r1, 15
    d244:	0258 	not	r1, r1
    d246:	2241 	addi	r1, r1, 1
    d248:	35b9 	ld	r2, -14(r6)
    d24a:	06b1 	sha	r3, r2, r1
    d24c:	39b9 	ld	r4, -14(r6)
    d24e:	2300 	addi	r1, r4, 0
    d250:	24c0 	addi	r2, r3, 0
    d252:	560e 	movi	r3, 14
    d254:	06d8 	not	r3, r3
    d256:	26c1 	addi	r3, r3, 1
    d258:	067b 	shl	r3, r1, r3
    d25a:	47b4 	st	-24(r6), r3
    d25c:	5002 	movi	r0, 2
    d25e:	5602 	movi	r3, 2
    d260:	47b3 	st	-26(r6), r3
    d262:	08b0 	sha	r4, r2, r0
    d264:	31b4 	ld	r0, -24(r6)
    d266:	080c 	or	r4, r0, r4
    d268:	31b3 	ld	r0, -26(r6)
    d26a:	0670 	sha	r3, r1, r0
    d26c:	5202 	movi	r1, 2
    d26e:	43b1 	st	-30(r6), r1
    d270:	5400 	movi	r2, 0
    d272:	45b2 	st	-28(r6), r2
    d274:	31b1 	ld	r0, -30(r6)
    d276:	02e0 	add	r1, r3, r0
    d278:	50b8 	movi	r0, -72
    d27a:	0026 	add	r0, r0, r6
    d27c:	4200 	st	0(r0), r1
    d27e:	52b8 	movi	r1, -72
    d280:	0266 	add	r1, r1, r6
    d282:	3240 	ld	r1, 0(r1)
    d284:	1463 	cmpltu	r2, r1, r3
    d286:	52bc 	movi	r1, -68
    d288:	0266 	add	r1, r1, r6
    d28a:	4440 	st	0(r1), r2
    d28c:	35b2 	ld	r2, -28(r6)
    d28e:	0122 	add	r0, r4, r2
    d290:	54ba 	movi	r2, -70
    d292:	04a6 	add	r2, r2, r6
    d294:	4080 	st	0(r2), r0
    d296:	58bc 	movi	r4, -68
    d298:	0926 	add	r4, r4, r6
    d29a:	3100 	ld	r0, 0(r4)
    d29c:	58ba 	movi	r4, -70
    d29e:	0926 	add	r4, r4, r6
    d2a0:	3900 	ld	r4, 0(r4)
    d2a2:	0624 	add	r3, r0, r4
    d2a4:	22c0 	addi	r1, r3, 0
    d2a6:	50ba 	movi	r0, -70
    d2a8:	0026 	add	r0, r0, r6
    d2aa:	4200 	st	0(r0), r1
    d2ac:	37b5 	ld	r3, -22(r6)
    d2ae:	54b8 	movi	r2, -72
    d2b0:	04a6 	add	r2, r2, r6
    d2b2:	3480 	ld	r2, 0(r2)
    d2b4:	02e2 	add	r1, r3, r2
    d2b6:	37ba 	ld	r3, -12(r6)
    d2b8:	e640 	stb	0(r1), r3
        letra[i].color=colores[i];
    d2ba:	39bf 	ld	r4, -2(r6)
    d2bc:	49bb 	st	-10(r6), r4
    d2be:	39bf 	ld	r4, -2(r6)
    d2c0:	500d 	movi	r0, 13
    d2c2:	51a0 	movhi	r0, -96
    d2c4:	520f 	movi	r1, 15
    d2c6:	0258 	not	r1, r1
    d2c8:	2241 	addi	r1, r1, 1
    d2ca:	0731 	sha	r3, r4, r1
    d2cc:	2300 	addi	r1, r4, 0
    d2ce:	24c0 	addi	r2, r3, 0
    d2d0:	0221 	add	r1, r0, r1
    d2d2:	d240 	ldb	r1, 0(r1)
    d2d4:	43bc 	st	-8(r6), r1
    d2d6:	5010 	movi	r0, 16
    d2d8:	51aa 	movhi	r0, -86
    d2da:	41b0 	st	-32(r6), r0
    d2dc:	520f 	movi	r1, 15
    d2de:	0258 	not	r1, r1
    d2e0:	2241 	addi	r1, r1, 1
    d2e2:	35bb 	ld	r2, -10(r6)
    d2e4:	06b1 	sha	r3, r2, r1
    d2e6:	39bb 	ld	r4, -10(r6)
    d2e8:	2300 	addi	r1, r4, 0
    d2ea:	24c0 	addi	r2, r3, 0
    d2ec:	560e 	movi	r3, 14
    d2ee:	06d8 	not	r3, r3
    d2f0:	26c1 	addi	r3, r3, 1
    d2f2:	067b 	shl	r3, r1, r3
    d2f4:	47af 	st	-34(r6), r3
    d2f6:	5002 	movi	r0, 2
    d2f8:	5602 	movi	r3, 2
    d2fa:	47ae 	st	-36(r6), r3
    d2fc:	08b0 	sha	r4, r2, r0
    d2fe:	31af 	ld	r0, -34(r6)
    d300:	080c 	or	r4, r0, r4
    d302:	31ae 	ld	r0, -36(r6)
    d304:	0670 	sha	r3, r1, r0
    d306:	5202 	movi	r1, 2
    d308:	43ac 	st	-40(r6), r1
    d30a:	5400 	movi	r2, 0
    d30c:	45ad 	st	-38(r6), r2
    d30e:	31ac 	ld	r0, -40(r6)
    d310:	02e0 	add	r1, r3, r0
    d312:	50b8 	movi	r0, -72
    d314:	0026 	add	r0, r0, r6
    d316:	4200 	st	0(r0), r1
    d318:	52b8 	movi	r1, -72
    d31a:	0266 	add	r1, r1, r6
    d31c:	3240 	ld	r1, 0(r1)
    d31e:	1463 	cmpltu	r2, r1, r3
    d320:	52bc 	movi	r1, -68
    d322:	0266 	add	r1, r1, r6
    d324:	4440 	st	0(r1), r2
    d326:	35ad 	ld	r2, -38(r6)
    d328:	0122 	add	r0, r4, r2
    d32a:	54ba 	movi	r2, -70
    d32c:	04a6 	add	r2, r2, r6
    d32e:	4080 	st	0(r2), r0
    d330:	58bc 	movi	r4, -68
    d332:	0926 	add	r4, r4, r6
    d334:	3100 	ld	r0, 0(r4)
    d336:	58ba 	movi	r4, -70
    d338:	0926 	add	r4, r4, r6
    d33a:	3900 	ld	r4, 0(r4)
    d33c:	0624 	add	r3, r0, r4
    d33e:	22c0 	addi	r1, r3, 0
    d340:	50ba 	movi	r0, -70
    d342:	0026 	add	r0, r0, r6
    d344:	4200 	st	0(r0), r1
    d346:	37b0 	ld	r3, -32(r6)
    d348:	54b8 	movi	r2, -72
    d34a:	04a6 	add	r2, r2, r6
    d34c:	3480 	ld	r2, 0(r2)
    d34e:	02e2 	add	r1, r3, r2
    d350:	37bc 	ld	r3, -8(r6)
    d352:	e641 	stb	1(r1), r3
        mostrar_nueva_posicion(i,letra[i].posicion,letra[i].caracter,letra[i].color);
    d354:	35bf 	ld	r2, -2(r6)
    d356:	5810 	movi	r4, 16
    d358:	59aa 	movhi	r4, -86
    d35a:	49ab 	st	-42(r6), r4
    d35c:	520f 	movi	r1, 15
    d35e:	0258 	not	r1, r1
    d360:	2241 	addi	r1, r1, 1
    d362:	02b1 	sha	r1, r2, r1
    d364:	2680 	addi	r3, r2, 0
    d366:	2840 	addi	r4, r1, 0
    d368:	520e 	movi	r1, 14
    d36a:	0258 	not	r1, r1
    d36c:	2241 	addi	r1, r1, 1
    d36e:	02f9 	shl	r1, r3, r1
    d370:	43aa 	st	-44(r6), r1
    d372:	5002 	movi	r0, 2
    d374:	5202 	movi	r1, 2
    d376:	43a9 	st	-46(r6), r1
    d378:	0530 	sha	r2, r4, r0
    d37a:	31aa 	ld	r0, -44(r6)
    d37c:	040a 	or	r2, r0, r2
    d37e:	31a9 	ld	r0, -46(r6)
    d380:	02f0 	sha	r1, r3, r0
    d382:	37ab 	ld	r3, -42(r6)
    d384:	02e1 	add	r1, r3, r1
    d386:	3240 	ld	r1, 0(r1)
    d388:	43bd 	st	-6(r6), r1
    d38a:	39bf 	ld	r4, -2(r6)
    d38c:	5010 	movi	r0, 16
    d38e:	51aa 	movhi	r0, -86
    d390:	41a8 	st	-48(r6), r0
    d392:	520f 	movi	r1, 15
    d394:	0258 	not	r1, r1
    d396:	2241 	addi	r1, r1, 1
    d398:	0731 	sha	r3, r4, r1
    d39a:	2300 	addi	r1, r4, 0
    d39c:	24c0 	addi	r2, r3, 0
    d39e:	560e 	movi	r3, 14
    d3a0:	06d8 	not	r3, r3
    d3a2:	26c1 	addi	r3, r3, 1
    d3a4:	067b 	shl	r3, r1, r3
    d3a6:	47a7 	st	-50(r6), r3
    d3a8:	5002 	movi	r0, 2
    d3aa:	5602 	movi	r3, 2
    d3ac:	47a6 	st	-52(r6), r3
    d3ae:	08b0 	sha	r4, r2, r0
    d3b0:	31a7 	ld	r0, -50(r6)
    d3b2:	080c 	or	r4, r0, r4
    d3b4:	31a6 	ld	r0, -52(r6)
    d3b6:	0670 	sha	r3, r1, r0
    d3b8:	5202 	movi	r1, 2
    d3ba:	43a4 	st	-56(r6), r1
    d3bc:	5400 	movi	r2, 0
    d3be:	45a5 	st	-54(r6), r2
    d3c0:	31a4 	ld	r0, -56(r6)
    d3c2:	02e0 	add	r1, r3, r0
    d3c4:	50b8 	movi	r0, -72
    d3c6:	0026 	add	r0, r0, r6
    d3c8:	4200 	st	0(r0), r1
    d3ca:	52b8 	movi	r1, -72
    d3cc:	0266 	add	r1, r1, r6
    d3ce:	3240 	ld	r1, 0(r1)
    d3d0:	1463 	cmpltu	r2, r1, r3
    d3d2:	52bc 	movi	r1, -68
    d3d4:	0266 	add	r1, r1, r6
    d3d6:	4440 	st	0(r1), r2
    d3d8:	35a5 	ld	r2, -54(r6)
    d3da:	0122 	add	r0, r4, r2
    d3dc:	54ba 	movi	r2, -70
    d3de:	04a6 	add	r2, r2, r6
    d3e0:	4080 	st	0(r2), r0
    d3e2:	58bc 	movi	r4, -68
    d3e4:	0926 	add	r4, r4, r6
    d3e6:	3100 	ld	r0, 0(r4)
    d3e8:	58ba 	movi	r4, -70
    d3ea:	0926 	add	r4, r4, r6
    d3ec:	3900 	ld	r4, 0(r4)
    d3ee:	0624 	add	r3, r0, r4
    d3f0:	22c0 	addi	r1, r3, 0
    d3f2:	50ba 	movi	r0, -70
    d3f4:	0026 	add	r0, r0, r6
    d3f6:	4200 	st	0(r0), r1
    d3f8:	37a8 	ld	r3, -48(r6)
    d3fa:	54b8 	movi	r2, -72
    d3fc:	04a6 	add	r2, r2, r6
    d3fe:	3480 	ld	r2, 0(r2)
    d400:	02e2 	add	r1, r3, r2
    d402:	d240 	ldb	r1, 0(r1)
    d404:	43be 	st	-4(r6), r1
    d406:	39bf 	ld	r4, -2(r6)
    d408:	5610 	movi	r3, 16
    d40a:	57aa 	movhi	r3, -86
    d40c:	47a3 	st	-58(r6), r3
    d40e:	520f 	movi	r1, 15
    d410:	0258 	not	r1, r1
    d412:	2241 	addi	r1, r1, 1
    d414:	0731 	sha	r3, r4, r1
    d416:	2300 	addi	r1, r4, 0
    d418:	24c0 	addi	r2, r3, 0
    d41a:	560e 	movi	r3, 14
    d41c:	06d8 	not	r3, r3
    d41e:	26c1 	addi	r3, r3, 1
    d420:	067b 	shl	r3, r1, r3
    d422:	47a2 	st	-60(r6), r3
    d424:	5002 	movi	r0, 2
    d426:	5802 	movi	r4, 2
    d428:	49a1 	st	-62(r6), r4
    d42a:	08b0 	sha	r4, r2, r0
    d42c:	31a2 	ld	r0, -60(r6)
    d42e:	080c 	or	r4, r0, r4
    d430:	31a1 	ld	r0, -62(r6)
    d432:	0670 	sha	r3, r1, r0
    d434:	5402 	movi	r2, 2
    d436:	52be 	movi	r1, -66
    d438:	0266 	add	r1, r1, r6
    d43a:	4440 	st	0(r1), r2
    d43c:	5000 	movi	r0, 0
    d43e:	41a0 	st	-64(r6), r0
    d440:	52be 	movi	r1, -66
    d442:	0266 	add	r1, r1, r6
    d444:	3240 	ld	r1, 0(r1)
    d446:	04e1 	add	r2, r3, r1
    d448:	52b8 	movi	r1, -72
    d44a:	0266 	add	r1, r1, r6
    d44c:	4440 	st	0(r1), r2
    d44e:	54b8 	movi	r2, -72
    d450:	04a6 	add	r2, r2, r6
    d452:	3480 	ld	r2, 0(r2)
    d454:	10a3 	cmpltu	r0, r2, r3
    d456:	54bc 	movi	r2, -68
    d458:	04a6 	add	r2, r2, r6
    d45a:	4080 	st	0(r2), r0
    d45c:	31a0 	ld	r0, -64(r6)
    d45e:	0320 	add	r1, r4, r0
    d460:	50ba 	movi	r0, -70
    d462:	0026 	add	r0, r0, r6
    d464:	4200 	st	0(r0), r1
    d466:	52bc 	movi	r1, -68
    d468:	0266 	add	r1, r1, r6
    d46a:	3440 	ld	r2, 0(r1)
    d46c:	52ba 	movi	r1, -70
    d46e:	0266 	add	r1, r1, r6
    d470:	3240 	ld	r1, 0(r1)
    d472:	06a1 	add	r3, r2, r1
    d474:	28c0 	addi	r4, r3, 0
    d476:	54ba 	movi	r2, -70
    d478:	04a6 	add	r2, r2, r6
    d47a:	4880 	st	0(r2), r4
    d47c:	35a3 	ld	r2, -58(r6)
    d47e:	50b8 	movi	r0, -72
    d480:	0026 	add	r0, r0, r6
    d482:	3000 	ld	r0, 0(r0)
    d484:	02a0 	add	r1, r2, r0
    d486:	d641 	ldb	r3, 1(r1)
    d488:	2ffa 	addi	r7, r7, -6
    d48a:	23c0 	addi	r1, r7, 0
    d48c:	35bf 	ld	r2, -2(r6)
    d48e:	4440 	st	0(r1), r2
    d490:	35bd 	ld	r2, -6(r6)
    d492:	4441 	st	2(r1), r2
    d494:	39be 	ld	r4, -4(r6)
    d496:	e844 	stb	4(r1), r4
    d498:	e645 	stb	5(r1), r3
    d49a:	5274 	movi	r1, 116
    d49c:	53d0 	movhi	r1, -48
    d49e:	aa44 	jal	r5, r1
    d4a0:	2fc6 	addi	r7, r7, 6
    d4a2:	33bf 	ld	r1, -2(r6)
    d4a4:	2241 	addi	r1, r1, 1
    d4a6:	43bf 	st	-2(r6), r1
    d4a8:	33bf 	ld	r1, -2(r6)
    d4aa:	540b 	movi	r2, 11
    d4ac:	124a 	cmple	r1, r1, r2
    d4ae:	5aea 	movi	r5, -22
    d4b0:	5bd1 	movhi	r5, -47
    d4b2:	a341 	jnz	r1, r5
    }
}
    d4b4:	31c3 	ld	r0, 6(r7)
    d4b6:	35c2 	ld	r2, 4(r7)
    d4b8:	37c1 	ld	r3, 2(r7)
    d4ba:	39c0 	ld	r4, 0(r7)
    d4bc:	2f80 	addi	r7, r6, 0
    d4be:	3dc0 	ld	r6, 0(r7)
    d4c0:	3bc1 	ld	r5, 2(r7)
    d4c2:	2fc4 	addi	r7, r7, 4
    d4c4:	a143 	jmp	r5

0000d4c6 <mainC>:


int mainC (void) {
    d4c6:	2fe0 	addi	r7, r7, -32
    d4c8:	4bcf 	st	30(r7), r5
    d4ca:	4dce 	st	28(r7), r6
    d4cc:	2ddc 	addi	r6, r7, 28
    d4ce:	5ac2 	movi	r5, -62
    d4d0:	0fe5 	add	r7, r7, r5
    d4d2:	41c3 	st	6(r7), r0
    d4d4:	45c2 	st	4(r7), r2
    d4d6:	47c1 	st	2(r7), r3
    d4d8:	49c0 	st	0(r7), r4

    unsigned int tics_anterior=0;
    d4da:	5200 	movi	r1, 0
    d4dc:	43bd 	st	-6(r6), r1
    int pause=0;
    d4de:	5200 	movi	r1, 0
    d4e0:	43be 	st	-4(r6), r1
    
    if (NUMERO_LETRAS<=LIMITE_LETRAS) {
        
        reset_corre_letras();
    d4e2:	5292 	movi	r1, -110
    d4e4:	53d1 	movhi	r1, -47
    d4e6:	aa44 	jal	r5, r1

        while (1) {
            switch (tecla_pulsada)
    d4e8:	5206 	movi	r1, 6
    d4ea:	53aa 	movhi	r1, -86
    d4ec:	3240 	ld	r1, 0(r1)
    d4ee:	43b7 	st	-18(r6), r1
    d4f0:	5252 	movi	r1, 82
    d4f2:	31b7 	ld	r0, -18(r6)
    d4f4:	1219 	cmpeq	r1, r0, r1
    d4f6:	6315 	bnz	r1, 44
    d4f8:	5252 	movi	r1, 82
    d4fa:	35b7 	ld	r2, -18(r6)
    d4fc:	12a9 	cmpleu	r1, r2, r1
    d4fe:	6207 	bz	r1, 16
    d500:	5250 	movi	r1, 80
    d502:	37b7 	ld	r3, -18(r6)
    d504:	12d9 	cmpeq	r1, r3, r1
    d506:	6316 	bnz	r1, 46
    d508:	5a4c 	movi	r5, 76
    d50a:	5bd5 	movhi	r5, -43
    d50c:	a143 	jmp	r5
    d50e:	5270 	movi	r1, 112
    d510:	39b7 	ld	r4, -18(r6)
    d512:	1319 	cmpeq	r1, r4, r1
    d514:	630f 	bnz	r1, 32
    d516:	5272 	movi	r1, 114
    d518:	31b7 	ld	r0, -18(r6)
    d51a:	1219 	cmpeq	r1, r0, r1
    d51c:	6302 	bnz	r1, 6
    d51e:	5a00 	movi	r5, 0
    d520:	6a15 	bz	r5, 44
            {
            case 'r':    case 'R':
                reset_corre_letras();
    d522:	5292 	movi	r1, -110
    d524:	53d1 	movhi	r1, -47
    d526:	aa44 	jal	r5, r1
                tecla_pulsada=0;
    d528:	5406 	movi	r2, 6
    d52a:	55aa 	movhi	r2, -86
    d52c:	5200 	movi	r1, 0
    d52e:	4280 	st	0(r2), r1
                break;
    d530:	5a00 	movi	r5, 0
    d532:	6a0c 	bz	r5, 26

            case 'p':    case 'P':
                if (pause==0) pause=1; else pause=0;
    d534:	33be 	ld	r1, -4(r6)
    d536:	6304 	bnz	r1, 10
    d538:	5201 	movi	r1, 1
    d53a:	43be 	st	-4(r6), r1
    d53c:	5a00 	movi	r5, 0
    d53e:	6a02 	bz	r5, 6
    d540:	5200 	movi	r1, 0
    d542:	43be 	st	-4(r6), r1
                tecla_pulsada=0;
    d544:	5406 	movi	r2, 6
    d546:	55aa 	movhi	r2, -86
    d548:	5200 	movi	r1, 0
    d54a:	4280 	st	0(r2), r1
                break;

            default:
                break;
            }

            if (pause==0) {
    d54c:	33be 	ld	r1, -4(r6)
    d54e:	5ae8 	movi	r5, -24
    d550:	5bd4 	movhi	r5, -44
    d552:	a341 	jnz	r1, r5
                // para DEBUG: mostramos los valores del timer por los leds verdes
                __asm__ ( "out %0, %1" 
    d554:	5260 	movi	r1, 96
    d556:	53a0 	movhi	r1, -96
    d558:	3240 	ld	r1, 0(r1)
    d55a:	7305 	out	5, r1
                        : /* sin salidas*/
                        : "i" (5), "r" (tics_timer));
                // fin DEBUG

                if (tics_timer!=tics_anterior) {
    d55c:	5260 	movi	r1, 96
    d55e:	53a0 	movhi	r1, -96
    d560:	3440 	ld	r2, 0(r1)
    d562:	33bd 	ld	r1, -6(r6)
    d564:	1299 	cmpeq	r1, r2, r1
    d566:	5ae8 	movi	r5, -24
    d568:	5bd4 	movhi	r5, -44
    d56a:	a341 	jnz	r1, r5
                    tics_anterior=tics_timer;
    d56c:	5260 	movi	r1, 96
    d56e:	53a0 	movhi	r1, -96
    d570:	3240 	ld	r1, 0(r1)
    d572:	43bd 	st	-6(r6), r1

                    int fila;
                    for (fila=0; fila<NUMERO_LETRAS; fila++) {
    d574:	5200 	movi	r1, 0
    d576:	43bf 	st	-2(r6), r1
    d578:	5a6c 	movi	r5, 108
    d57a:	5bd8 	movhi	r5, -40
    d57c:	a143 	jmp	r5
                        if (tics_timer%divisores[fila]==0) {
    d57e:	5260 	movi	r1, 96
    d580:	53a0 	movhi	r1, -96
    d582:	3240 	ld	r1, 0(r1)
    d584:	43b8 	st	-16(r6), r1
    d586:	39bf 	ld	r4, -2(r6)
    d588:	521a 	movi	r1, 26
    d58a:	53a0 	movhi	r1, -96
    d58c:	43b6 	st	-20(r6), r1
    d58e:	520f 	movi	r1, 15
    d590:	0258 	not	r1, r1
    d592:	2241 	addi	r1, r1, 1
    d594:	0731 	sha	r3, r4, r1
    d596:	2300 	addi	r1, r4, 0
    d598:	24c0 	addi	r2, r3, 0
    d59a:	0661 	add	r3, r1, r1
    d59c:	10e1 	cmpltu	r0, r3, r1
    d59e:	08a2 	add	r4, r2, r2
    d5a0:	0224 	add	r1, r0, r4
    d5a2:	2840 	addi	r4, r1, 0
    d5a4:	35b6 	ld	r2, -20(r6)
    d5a6:	02a3 	add	r1, r2, r3
    d5a8:	3240 	ld	r1, 0(r1)
    d5aa:	2440 	addi	r2, r1, 0
    d5ac:	37b8 	ld	r3, -16(r6)
    d5ae:	82ea 	divu	r1, r3, r2
    d5b0:	8242 	mul	r1, r1, r2
    d5b2:	35b8 	ld	r2, -16(r6)
    d5b4:	02a9 	sub	r1, r2, r1
    d5b6:	5a66 	movi	r5, 102
    d5b8:	5bd8 	movhi	r5, -40
    d5ba:	a341 	jnz	r1, r5
                            borrar_letra(fila,letra[fila].posicion);
    d5bc:	35bf 	ld	r2, -2(r6)
    d5be:	5810 	movi	r4, 16
    d5c0:	59aa 	movhi	r4, -86
    d5c2:	49b5 	st	-22(r6), r4
    d5c4:	520f 	movi	r1, 15
    d5c6:	0258 	not	r1, r1
    d5c8:	2241 	addi	r1, r1, 1
    d5ca:	02b1 	sha	r1, r2, r1
    d5cc:	2680 	addi	r3, r2, 0
    d5ce:	2840 	addi	r4, r1, 0
    d5d0:	520e 	movi	r1, 14
    d5d2:	0258 	not	r1, r1
    d5d4:	2241 	addi	r1, r1, 1
    d5d6:	02f9 	shl	r1, r3, r1
    d5d8:	43b4 	st	-24(r6), r1
    d5da:	5002 	movi	r0, 2
    d5dc:	5202 	movi	r1, 2
    d5de:	43b3 	st	-26(r6), r1
    d5e0:	0530 	sha	r2, r4, r0
    d5e2:	31b4 	ld	r0, -24(r6)
    d5e4:	040a 	or	r2, r0, r2
    d5e6:	31b3 	ld	r0, -26(r6)
    d5e8:	02f0 	sha	r1, r3, r0
    d5ea:	37b5 	ld	r3, -22(r6)
    d5ec:	02e1 	add	r1, r3, r1
    d5ee:	3640 	ld	r3, 0(r1)
    d5f0:	2ffc 	addi	r7, r7, -4
    d5f2:	25c0 	addi	r2, r7, 0
    d5f4:	33bf 	ld	r1, -2(r6)
    d5f6:	4280 	st	0(r2), r1
    d5f8:	4681 	st	2(r2), r3
    d5fa:	5232 	movi	r1, 50
    d5fc:	53d0 	movhi	r1, -48
    d5fe:	aa44 	jal	r5, r1
    d600:	2fc4 	addi	r7, r7, 4
                            if (letra[fila].posicion<80)
    d602:	35bf 	ld	r2, -2(r6)
    d604:	5810 	movi	r4, 16
    d606:	59aa 	movhi	r4, -86
    d608:	49b2 	st	-28(r6), r4
    d60a:	520f 	movi	r1, 15
    d60c:	0258 	not	r1, r1
    d60e:	2241 	addi	r1, r1, 1
    d610:	02b1 	sha	r1, r2, r1
    d612:	2680 	addi	r3, r2, 0
    d614:	2840 	addi	r4, r1, 0
    d616:	520e 	movi	r1, 14
    d618:	0258 	not	r1, r1
    d61a:	2241 	addi	r1, r1, 1
    d61c:	02f9 	shl	r1, r3, r1
    d61e:	43b1 	st	-30(r6), r1
    d620:	5002 	movi	r0, 2
    d622:	5202 	movi	r1, 2
    d624:	43b0 	st	-32(r6), r1
    d626:	0530 	sha	r2, r4, r0
    d628:	31b1 	ld	r0, -30(r6)
    d62a:	040a 	or	r2, r0, r2
    d62c:	31b0 	ld	r0, -32(r6)
    d62e:	02f0 	sha	r1, r3, r0
    d630:	37b2 	ld	r3, -28(r6)
    d632:	02e1 	add	r1, r3, r1
    d634:	3440 	ld	r2, 0(r1)
    d636:	524f 	movi	r1, 79
    d638:	1289 	cmple	r1, r2, r1
    d63a:	5aba 	movi	r5, -70
    d63c:	5bd6 	movhi	r5, -42
    d63e:	a340 	jz	r1, r5
                                letra[fila].posicion++;
    d640:	39bf 	ld	r4, -2(r6)
    d642:	49b9 	st	-14(r6), r4
    d644:	5010 	movi	r0, 16
    d646:	51aa 	movhi	r0, -86
    d648:	41af 	st	-34(r6), r0
    d64a:	520f 	movi	r1, 15
    d64c:	0258 	not	r1, r1
    d64e:	2241 	addi	r1, r1, 1
    d650:	35b9 	ld	r2, -14(r6)
    d652:	02b1 	sha	r1, r2, r1
    d654:	31b9 	ld	r0, -14(r6)
    d656:	2600 	addi	r3, r0, 0
    d658:	2840 	addi	r4, r1, 0
    d65a:	520e 	movi	r1, 14
    d65c:	0258 	not	r1, r1
    d65e:	2241 	addi	r1, r1, 1
    d660:	02f9 	shl	r1, r3, r1
    d662:	43ae 	st	-36(r6), r1
    d664:	5002 	movi	r0, 2
    d666:	5202 	movi	r1, 2
    d668:	43ad 	st	-38(r6), r1
    d66a:	0530 	sha	r2, r4, r0
    d66c:	31ae 	ld	r0, -36(r6)
    d66e:	040a 	or	r2, r0, r2
    d670:	31ad 	ld	r0, -38(r6)
    d672:	02f0 	sha	r1, r3, r0
    d674:	37af 	ld	r3, -34(r6)
    d676:	02e1 	add	r1, r3, r1
    d678:	3240 	ld	r1, 0(r1)
    d67a:	2241 	addi	r1, r1, 1
    d67c:	43ba 	st	-12(r6), r1
    d67e:	5810 	movi	r4, 16
    d680:	59aa 	movhi	r4, -86
    d682:	49ac 	st	-40(r6), r4
    d684:	520f 	movi	r1, 15
    d686:	0258 	not	r1, r1
    d688:	2241 	addi	r1, r1, 1
    d68a:	31b9 	ld	r0, -14(r6)
    d68c:	0231 	sha	r1, r0, r1
    d68e:	35b9 	ld	r2, -14(r6)
    d690:	2680 	addi	r3, r2, 0
    d692:	2840 	addi	r4, r1, 0
    d694:	520e 	movi	r1, 14
    d696:	0258 	not	r1, r1
    d698:	2241 	addi	r1, r1, 1
    d69a:	02f9 	shl	r1, r3, r1
    d69c:	43ab 	st	-42(r6), r1
    d69e:	5002 	movi	r0, 2
    d6a0:	5202 	movi	r1, 2
    d6a2:	43aa 	st	-44(r6), r1
    d6a4:	0530 	sha	r2, r4, r0
    d6a6:	31ab 	ld	r0, -42(r6)
    d6a8:	040a 	or	r2, r0, r2
    d6aa:	31aa 	ld	r0, -44(r6)
    d6ac:	02f0 	sha	r1, r3, r0
    d6ae:	37ac 	ld	r3, -40(r6)
    d6b0:	02e1 	add	r1, r3, r1
    d6b2:	39ba 	ld	r4, -12(r6)
    d6b4:	4840 	st	0(r1), r4
    d6b6:	5a00 	movi	r5, 0
    d6b8:	6a1b 	bz	r5, 56
                            else
                                letra[fila].posicion=0;
    d6ba:	35bf 	ld	r2, -2(r6)
    d6bc:	5010 	movi	r0, 16
    d6be:	51aa 	movhi	r0, -86
    d6c0:	41a9 	st	-46(r6), r0
    d6c2:	520f 	movi	r1, 15
    d6c4:	0258 	not	r1, r1
    d6c6:	2241 	addi	r1, r1, 1
    d6c8:	02b1 	sha	r1, r2, r1
    d6ca:	2680 	addi	r3, r2, 0
    d6cc:	2840 	addi	r4, r1, 0
    d6ce:	520e 	movi	r1, 14
    d6d0:	0258 	not	r1, r1
    d6d2:	2241 	addi	r1, r1, 1
    d6d4:	02f9 	shl	r1, r3, r1
    d6d6:	43a8 	st	-48(r6), r1
    d6d8:	5002 	movi	r0, 2
    d6da:	5202 	movi	r1, 2
    d6dc:	43a7 	st	-50(r6), r1
    d6de:	0530 	sha	r2, r4, r0
    d6e0:	31a8 	ld	r0, -48(r6)
    d6e2:	040a 	or	r2, r0, r2
    d6e4:	31a7 	ld	r0, -50(r6)
    d6e6:	02f0 	sha	r1, r3, r0
    d6e8:	37a9 	ld	r3, -46(r6)
    d6ea:	04e1 	add	r2, r3, r1
    d6ec:	5200 	movi	r1, 0
    d6ee:	4280 	st	0(r2), r1

                            mostrar_nueva_posicion(fila,letra[fila].posicion,letra[fila].caracter,letra[fila].color);
    d6f0:	35bf 	ld	r2, -2(r6)
    d6f2:	5810 	movi	r4, 16
    d6f4:	59aa 	movhi	r4, -86
    d6f6:	49a6 	st	-52(r6), r4
    d6f8:	520f 	movi	r1, 15
    d6fa:	0258 	not	r1, r1
    d6fc:	2241 	addi	r1, r1, 1
    d6fe:	02b1 	sha	r1, r2, r1
    d700:	2680 	addi	r3, r2, 0
    d702:	2840 	addi	r4, r1, 0
    d704:	520e 	movi	r1, 14
    d706:	0258 	not	r1, r1
    d708:	2241 	addi	r1, r1, 1
    d70a:	02f9 	shl	r1, r3, r1
    d70c:	43a5 	st	-54(r6), r1
    d70e:	5002 	movi	r0, 2
    d710:	5202 	movi	r1, 2
    d712:	43a4 	st	-56(r6), r1
    d714:	0530 	sha	r2, r4, r0
    d716:	31a5 	ld	r0, -54(r6)
    d718:	040a 	or	r2, r0, r2
    d71a:	31a4 	ld	r0, -56(r6)
    d71c:	02f0 	sha	r1, r3, r0
    d71e:	37a6 	ld	r3, -52(r6)
    d720:	02e1 	add	r1, r3, r1
    d722:	3240 	ld	r1, 0(r1)
    d724:	43bb 	st	-10(r6), r1
    d726:	39bf 	ld	r4, -2(r6)
    d728:	5010 	movi	r0, 16
    d72a:	51aa 	movhi	r0, -86
    d72c:	41a3 	st	-58(r6), r0
    d72e:	520f 	movi	r1, 15
    d730:	0258 	not	r1, r1
    d732:	2241 	addi	r1, r1, 1
    d734:	0731 	sha	r3, r4, r1
    d736:	2300 	addi	r1, r4, 0
    d738:	24c0 	addi	r2, r3, 0
    d73a:	560e 	movi	r3, 14
    d73c:	06d8 	not	r3, r3
    d73e:	26c1 	addi	r3, r3, 1
    d740:	067b 	shl	r3, r1, r3
    d742:	47a2 	st	-60(r6), r3
    d744:	5002 	movi	r0, 2
    d746:	5602 	movi	r3, 2
    d748:	47a1 	st	-62(r6), r3
    d74a:	08b0 	sha	r4, r2, r0
    d74c:	31a2 	ld	r0, -60(r6)
    d74e:	080c 	or	r4, r0, r4
    d750:	31a1 	ld	r0, -62(r6)
    d752:	0670 	sha	r3, r1, r0
    d754:	5402 	movi	r2, 2
    d756:	52be 	movi	r1, -66
    d758:	0266 	add	r1, r1, r6
    d75a:	4440 	st	0(r1), r2
    d75c:	5000 	movi	r0, 0
    d75e:	41a0 	st	-64(r6), r0
    d760:	52be 	movi	r1, -66
    d762:	0266 	add	r1, r1, r6
    d764:	3240 	ld	r1, 0(r1)
    d766:	04e1 	add	r2, r3, r1
    d768:	52ae 	movi	r1, -82
    d76a:	0266 	add	r1, r1, r6
    d76c:	4440 	st	0(r1), r2
    d76e:	54ae 	movi	r2, -82
    d770:	04a6 	add	r2, r2, r6
    d772:	3480 	ld	r2, 0(r2)
    d774:	10a3 	cmpltu	r0, r2, r3
    d776:	54b2 	movi	r2, -78
    d778:	04a6 	add	r2, r2, r6
    d77a:	4080 	st	0(r2), r0
    d77c:	31a0 	ld	r0, -64(r6)
    d77e:	0320 	add	r1, r4, r0
    d780:	50b0 	movi	r0, -80
    d782:	0026 	add	r0, r0, r6
    d784:	4200 	st	0(r0), r1
    d786:	52b2 	movi	r1, -78
    d788:	0266 	add	r1, r1, r6
    d78a:	3440 	ld	r2, 0(r1)
    d78c:	52b0 	movi	r1, -80
    d78e:	0266 	add	r1, r1, r6
    d790:	3240 	ld	r1, 0(r1)
    d792:	06a1 	add	r3, r2, r1
    d794:	28c0 	addi	r4, r3, 0
    d796:	54b0 	movi	r2, -80
    d798:	04a6 	add	r2, r2, r6
    d79a:	4880 	st	0(r2), r4
    d79c:	35a3 	ld	r2, -58(r6)
    d79e:	50ae 	movi	r0, -82
    d7a0:	0026 	add	r0, r0, r6
    d7a2:	3000 	ld	r0, 0(r0)
    d7a4:	02a0 	add	r1, r2, r0
    d7a6:	d240 	ldb	r1, 0(r1)
    d7a8:	43bc 	st	-8(r6), r1
    d7aa:	39bf 	ld	r4, -2(r6)
    d7ac:	5410 	movi	r2, 16
    d7ae:	55aa 	movhi	r2, -86
    d7b0:	52bc 	movi	r1, -68
    d7b2:	0266 	add	r1, r1, r6
    d7b4:	4440 	st	0(r1), r2
    d7b6:	520f 	movi	r1, 15
    d7b8:	0258 	not	r1, r1
    d7ba:	2241 	addi	r1, r1, 1
    d7bc:	0731 	sha	r3, r4, r1
    d7be:	2300 	addi	r1, r4, 0
    d7c0:	24c0 	addi	r2, r3, 0
    d7c2:	560e 	movi	r3, 14
    d7c4:	06d8 	not	r3, r3
    d7c6:	26c1 	addi	r3, r3, 1
    d7c8:	007b 	shl	r0, r1, r3
    d7ca:	58ba 	movi	r4, -70
    d7cc:	0926 	add	r4, r4, r6
    d7ce:	4100 	st	0(r4), r0
    d7d0:	5002 	movi	r0, 2
    d7d2:	5802 	movi	r4, 2
    d7d4:	56b8 	movi	r3, -72
    d7d6:	06e6 	add	r3, r3, r6
    d7d8:	48c0 	st	0(r3), r4
    d7da:	08b0 	sha	r4, r2, r0
    d7dc:	50ba 	movi	r0, -70
    d7de:	0026 	add	r0, r0, r6
    d7e0:	3000 	ld	r0, 0(r0)
    d7e2:	080c 	or	r4, r0, r4
    d7e4:	50b8 	movi	r0, -72
    d7e6:	0026 	add	r0, r0, r6
    d7e8:	3000 	ld	r0, 0(r0)
    d7ea:	0670 	sha	r3, r1, r0
    d7ec:	5402 	movi	r2, 2
    d7ee:	52b4 	movi	r1, -76
    d7f0:	0266 	add	r1, r1, r6
    d7f2:	4440 	st	0(r1), r2
    d7f4:	5200 	movi	r1, 0
    d7f6:	50b6 	movi	r0, -74
    d7f8:	0026 	add	r0, r0, r6
    d7fa:	4200 	st	0(r0), r1
    d7fc:	54b4 	movi	r2, -76
    d7fe:	04a6 	add	r2, r2, r6
    d800:	3480 	ld	r2, 0(r2)
    d802:	00e2 	add	r0, r3, r2
    d804:	54ae 	movi	r2, -82
    d806:	04a6 	add	r2, r2, r6
    d808:	4080 	st	0(r2), r0
    d80a:	50ae 	movi	r0, -82
    d80c:	0026 	add	r0, r0, r6
    d80e:	3000 	ld	r0, 0(r0)
    d810:	1223 	cmpltu	r1, r0, r3
    d812:	50b2 	movi	r0, -78
    d814:	0026 	add	r0, r0, r6
    d816:	4200 	st	0(r0), r1
    d818:	52b6 	movi	r1, -74
    d81a:	0266 	add	r1, r1, r6
    d81c:	3240 	ld	r1, 0(r1)
    d81e:	0521 	add	r2, r4, r1
    d820:	52b0 	movi	r1, -80
    d822:	0266 	add	r1, r1, r6
    d824:	4440 	st	0(r1), r2
    d826:	54b2 	movi	r2, -78
    d828:	04a6 	add	r2, r2, r6
    d82a:	3880 	ld	r4, 0(r2)
    d82c:	54b0 	movi	r2, -80
    d82e:	04a6 	add	r2, r2, r6
    d830:	3480 	ld	r2, 0(r2)
    d832:	0722 	add	r3, r4, r2
    d834:	20c0 	addi	r0, r3, 0
    d836:	58b0 	movi	r4, -80
    d838:	0926 	add	r4, r4, r6
    d83a:	4100 	st	0(r4), r0
    d83c:	54bc 	movi	r2, -68
    d83e:	04a6 	add	r2, r2, r6
    d840:	3680 	ld	r3, 0(r2)
    d842:	54ae 	movi	r2, -82
    d844:	04a6 	add	r2, r2, r6
    d846:	3480 	ld	r2, 0(r2)
    d848:	02e2 	add	r1, r3, r2
    d84a:	d641 	ldb	r3, 1(r1)
    d84c:	2ffa 	addi	r7, r7, -6
    d84e:	23c0 	addi	r1, r7, 0
    d850:	35bf 	ld	r2, -2(r6)
    d852:	4440 	st	0(r1), r2
    d854:	39bb 	ld	r4, -10(r6)
    d856:	4841 	st	2(r1), r4
    d858:	31bc 	ld	r0, -8(r6)
    d85a:	e044 	stb	4(r1), r0
    d85c:	e645 	stb	5(r1), r3
    d85e:	5274 	movi	r1, 116
    d860:	53d0 	movhi	r1, -48
    d862:	aa44 	jal	r5, r1
    d864:	2fc6 	addi	r7, r7, 6
    d866:	33bf 	ld	r1, -2(r6)
    d868:	2241 	addi	r1, r1, 1
    d86a:	43bf 	st	-2(r6), r1
    d86c:	33bf 	ld	r1, -2(r6)
    d86e:	540b 	movi	r2, 11
    d870:	124a 	cmple	r1, r1, r2
    d872:	5a7e 	movi	r5, 126
    d874:	5bd5 	movhi	r5, -43
    d876:	a341 	jnz	r1, r5
                        }
                    }
                }
            }
        }
    d878:	5ae8 	movi	r5, -24
    d87a:	5bd4 	movhi	r5, -44
    d87c:	a143 	jmp	r5

temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00007f0c paddr 0x00007f0c align 2**0
         filesz 0x0000012a memsz 0x0000012a flags rw-
    LOAD off    0x0000012a vaddr 0x0000a000 paddr 0x0000a000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000180 vaddr 0x0000aa00 paddr 0x0000aa00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x0000018c vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x00000240 memsz 0x00000240 flags r-x
    LOAD off    0x000003cc vaddr 0x0000d000 paddr 0x0000d000 align 2**0
         filesz 0x0000087e memsz 0x0000087e flags r-x
    LOAD off    0x00000c4a vaddr 0x0000f000 paddr 0x0000f000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      00000240  0000c000  0000c000  0000018c  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  0000d000  0000d000  000003cc  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  0000f000  0000f000  00000c4a  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      00000036  00008000  00008000  000000f4  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  0000a000  0000a000  0000012a  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  0000aa00  0000aa00  0000018c  2**4  ALLOC
  6 .stab         000010c8  0000aa40  0000aa40  00000dac  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000007e7  0000bb08  0000bb08  00001e74  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000a000 l    d  .userdataCorreletras	00000000 .userdataCorreletras
0000a034 g     O .userdataCorreletras	0000002b mensaje
0000a060 g     O .userdataCorreletras	00000002 tics_timer
0000a000 g     O .userdataCorreletras	0000000d letras
0000a00d g     O .userdataCorreletras	0000000d colores
0000a01a g     O .userdataCorreletras	0000001a divisores


Disassembly of section .userdataCorreletras:

0000a000 <letras>:
    a000:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d              ABCDEFGHIJKLM

0000a00d <colores>:
    a00d:	3f 03 0c 30 15 3c 0f 2a 2a 3f 1a 21 2b              ?..0.<.**?.!+

0000a01a <divisores>:
    a01a:	01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00     ................
    a02a:	09 00 0a 00 0b 00 0c 00 0d 00                       ..........

0000a034 <mensaje>:
    a034:	70 75 6c 73 61 20 27 52 27 20 70 61 72 61 20 72     pulsa 'R' para r
    a044:	65 69 6e 69 63 69 61 72 20 6f 20 27 50 27 20 70     einiciar o 'P' p
    a054:	61 72 61 20 70 61 75 73 61 2e 00 00                 ara pausa...

0000a060 <tics_timer>:
    a060:	01 00                                               ..
