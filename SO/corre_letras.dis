
temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00002000 l    d  .userCorreletras	00000000 .userCorreletras
0000201e l       .userCorreletras	00000000 __repe
000024c6 g     F .userCorreletras	000003b8 mainC
00002192 g     F .userCorreletras	00000334 reset_corre_letras
000020f6 g     F .userCorreletras	0000009c write
000020be g     F .userCorreletras	00000038 strlen_s
00002074 g     F .userCorreletras	0000004a mostrar_nueva_posicion
00002032 g     F .userCorreletras	00000042 borrar_letra
00002000 g     F .userCorreletras	00000032 clear_screen


Disassembly of section .userCorreletras:

00002000 <clear_screen>:
* Borra la pantalla: Escribe 80x30 caracteres (espacios con   *
* fondo negro) en la memoria de la pantalla (0xA000)          *
**************************************************************/ 
void clear_screen(void)
{
    2000:	2ff2 	addi	r7, r7, -14
    2002:	4bc6 	st	12(r7), r5
    2004:	4dc5 	st	10(r7), r6
    2006:	2dca 	addi	r6, r7, 10
    2008:	45c1 	st	2(r7), r2
    200a:	47c0 	st	0(r7), r3
    int aux1, aux2, aux3;

    __asm__ (  
    200c:	37bd 	ld	r3, -6(r6)
    200e:	35be 	ld	r2, -4(r6)
    2010:	33bf 	ld	r1, -2(r6)
    2012:	5600 	movi	r3, 0
    2014:	57a0 	movhi	r3, -96
    2016:	5460 	movi	r2, 96
    2018:	5509 	movhi	r2, 9
    201a:	5220 	movi	r1, 32
    201c:	5300 	movhi	r1, 0

0000201e <__repe>:
    201e:	42c0 	st	0(r3), r1
    2020:	26c2 	addi	r3, r3, 2
    2022:	24bf 	addi	r2, r2, -1
    2024:	65fc 	bnz	r2, -6
            "movi  %0, lo(0xA000)\n\t"   //0xA000 direccion de inicio de la memoria de video
            "movhi %0, hi(0xA000)\n\t"
            "movi  %1, lo(2400)\n\t"     //(80*30=2400=0x0960) numero caracteres de la pantalla
            "movhi %1, hi(2400)\n\t"
            "movi  %2, lo(0x0020)\n\t"
            "movhi %2, hi(0x0020)\n\t"   //un espacio en color negro
            "__repe: st 0(%0), %2\n\t"
            "addi  %0, %0,2\n\t"
            "addi  %1, %1,-1\n\t"
            "bnz   %1, __repe\n\t"
            : /* sin salidas*/
            : "r" (aux1),
              "r" (aux2),
              "r" (aux3));  
}
    2026:	35c1 	ld	r2, 2(r7)
    2028:	37c0 	ld	r3, 0(r7)
    202a:	3dc5 	ld	r6, 10(r7)
    202c:	3bc6 	ld	r5, 12(r7)
    202e:	2fce 	addi	r7, r7, 14
    2030:	a143 	jmp	r5

00002032 <borrar_letra>:


/**************************************************************
* Borra un caracter en la pantalla: Escribe un espacio con    *
* fondo negro en la fila y columnas indicadas                 *
**************************************************************/ 
void borrar_letra(int fila, int col)
{
    2032:	2ff4 	addi	r7, r7, -12
    2034:	4bc5 	st	10(r7), r5
    2036:	4dc4 	st	8(r7), r6
    2038:	2dc8 	addi	r6, r7, 8
    203a:	41c1 	st	2(r7), r0
    203c:	45c0 	st	0(r7), r2
    int valor;
    int pos;

    valor=0x0020;               //un espacio en color negro
    203e:	5220 	movi	r1, 32
    2040:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;        // cada caracter ocupa 2 bytes de memoria de video
    2042:	3382 	ld	r1, 4(r6)
    2044:	2440 	addi	r2, r1, 0
    2046:	5204 	movi	r1, 4
    2048:	04b1 	sha	r2, r2, r1
    204a:	5202 	movi	r1, 2
    204c:	02b1 	sha	r1, r2, r1
    204e:	04a1 	add	r2, r2, r1
    2050:	3383 	ld	r1, 6(r6)
    2052:	02a1 	add	r1, r2, r1
    2054:	0261 	add	r1, r1, r1
    2056:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;           // la memoria de video empieza en la direccion 0xA000 (40960)
    2058:	33bf 	ld	r1, -2(r6)
    205a:	5400 	movi	r2, 0
    205c:	55a0 	movhi	r2, -96
    205e:	0262 	add	r1, r1, r2
    2060:	43bf 	st	-2(r6), r1

    __asm__ (
    2062:	31bf 	ld	r0, -2(r6)
    2064:	33be 	ld	r1, -4(r6)
    2066:	4200 	st	0(r0), r1
            "st 0(%0), %1"      // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (valor));  
}
    2068:	31c1 	ld	r0, 2(r7)
    206a:	35c0 	ld	r2, 0(r7)
    206c:	3dc4 	ld	r6, 8(r7)
    206e:	3bc5 	ld	r5, 10(r7)
    2070:	2fcc 	addi	r7, r7, 12
    2072:	a143 	jmp	r5

00002074 <mostrar_nueva_posicion>:


/*******************************************************************
* Muestra un caracter en la pantalla: Escribe el caracter recibido *
* con el color y fondo indicados en la fila y columnas indicadas   *
*******************************************************************/ 
void mostrar_nueva_posicion(int fila, int col, char c, char color)
{
    2074:	2ff4 	addi	r7, r7, -12
    2076:	4bc5 	st	10(r7), r5
    2078:	4dc4 	st	8(r7), r6
    207a:	2dc8 	addi	r6, r7, 8
    207c:	41c1 	st	2(r7), r0
    207e:	45c0 	st	0(r7), r2
    int caracter_compuesto;
    int pos;

    caracter_compuesto=color*256+c;
    2080:	d589 	ldb	r2, 9(r6)
    2082:	5208 	movi	r1, 8
    2084:	04b1 	sha	r2, r2, r1
    2086:	d388 	ldb	r1, 8(r6)
    2088:	02a1 	add	r1, r2, r1
    208a:	43be 	st	-4(r6), r1
    pos=(80*fila+col)*2;           // cada caracter ocupa 2 bytes de memoria de video
    208c:	3382 	ld	r1, 4(r6)
    208e:	2440 	addi	r2, r1, 0
    2090:	5204 	movi	r1, 4
    2092:	04b1 	sha	r2, r2, r1
    2094:	5202 	movi	r1, 2
    2096:	02b1 	sha	r1, r2, r1
    2098:	04a1 	add	r2, r2, r1
    209a:	3383 	ld	r1, 6(r6)
    209c:	02a1 	add	r1, r2, r1
    209e:	0261 	add	r1, r1, r1
    20a0:	43bf 	st	-2(r6), r1
    pos=pos + 0xA000;              // la memoria de video empieza en la direccion 0xA000 (40960)
    20a2:	33bf 	ld	r1, -2(r6)
    20a4:	5400 	movi	r2, 0
    20a6:	55a0 	movhi	r2, -96
    20a8:	0262 	add	r1, r1, r2
    20aa:	43bf 	st	-2(r6), r1

    __asm__ (
    20ac:	31bf 	ld	r0, -2(r6)
    20ae:	33be 	ld	r1, -4(r6)
    20b0:	4200 	st	0(r0), r1
            "st 0(%0), %1"         // %0 corresponde a la variable "pos" que habra sido cargada en un registro
                                   // %1 corresponde a la variable "c" que habra sido cargada en otro registro
            : /* sin salidas */
            : "a" (pos),
              "b" (caracter_compuesto));  
}
    20b2:	31c1 	ld	r0, 2(r7)
    20b4:	35c0 	ld	r2, 0(r7)
    20b6:	3dc4 	ld	r6, 8(r7)
    20b8:	3bc5 	ld	r5, 10(r7)
    20ba:	2fcc 	addi	r7, r7, 12
    20bc:	a143 	jmp	r5

000020be <strlen_s>:


/*****************************************************************
* Devuelve la longitud de una cadena de caracteres *
******************************************************************/ 
int strlen_s(char *str)
{
    20be:	2ff8 	addi	r7, r7, -8
    20c0:	4bc3 	st	6(r7), r5
    20c2:	4dc2 	st	4(r7), r6
    20c4:	2dc4 	addi	r6, r7, 4
    20c6:	45c0 	st	0(r7), r2
  int len;
  for (len = 0; *str++; len++);
    20c8:	5200 	movi	r1, 0
    20ca:	43bf 	st	-2(r6), r1
    20cc:	5a00 	movi	r5, 0
    20ce:	6a03 	bz	r5, 8
    20d0:	33bf 	ld	r1, -2(r6)
    20d2:	2241 	addi	r1, r1, 1
    20d4:	43bf 	st	-2(r6), r1
    20d6:	3382 	ld	r1, 4(r6)
    20d8:	d440 	ldb	r2, 0(r1)
    20da:	5200 	movi	r1, 0
    20dc:	1299 	cmpeq	r1, r2, r1
    20de:	0258 	not	r1, r1
    20e0:	2242 	addi	r1, r1, 2
    20e2:	3382 	ld	r1, 4(r6)
    20e4:	2241 	addi	r1, r1, 1
    20e6:	4382 	st	4(r6), r1
    20e8:	65f3 	bnz	r2, -24
  return len;
    20ea:	33bf 	ld	r1, -2(r6)
}
    20ec:	35c0 	ld	r2, 0(r7)
    20ee:	3dc2 	ld	r6, 4(r7)
    20f0:	3bc3 	ld	r5, 6(r7)
    20f2:	2fc8 	addi	r7, r7, 8
    20f4:	a143 	jmp	r5

000020f6 <write>:


/*****************************************************************
* Muestra una cadena de caracteres en la pantalla con el color y *
* el fondo indicados empezando la fila y columnas indicadas      *
******************************************************************/ 
int write(int fila, int col, char *buf, int size, char color)
{
    20f6:	2fee 	addi	r7, r7, -18
    20f8:	4bc8 	st	16(r7), r5
    20fa:	4dc7 	st	14(r7), r6
    20fc:	2dce 	addi	r6, r7, 14
    20fe:	45c1 	st	2(r7), r2
    2100:	47c0 	st	0(r7), r3
  int i, t;
  int f, c, car;
  t = 0; f = fila; c = col;
    2102:	5200 	movi	r1, 0
    2104:	43bc 	st	-8(r6), r1
    2106:	3382 	ld	r1, 4(r6)
    2108:	43bd 	st	-6(r6), r1
    210a:	3383 	ld	r1, 6(r6)
    210c:	43be 	st	-4(r6), r1
  for (i=0; i<size; i++)   
    210e:	5200 	movi	r1, 0
    2110:	43bb 	st	-10(r6), r1
    2112:	5a78 	movi	r5, 120
    2114:	5b21 	movhi	r5, 33
    2116:	a143 	jmp	r5
    {
      car = buf[i];
    2118:	35bb 	ld	r2, -10(r6)
    211a:	3384 	ld	r1, 8(r6)
    211c:	02a1 	add	r1, r2, r1
    211e:	d240 	ldb	r1, 0(r1)
    2120:	43bf 	st	-2(r6), r1
      mostrar_nueva_posicion(f, c, car, color);
    2122:	33bf 	ld	r1, -2(r6)
    2124:	2640 	addi	r3, r1, 0
    2126:	2ffa 	addi	r7, r7, -6
    2128:	25c0 	addi	r2, r7, 0
    212a:	33bd 	ld	r1, -6(r6)
    212c:	4280 	st	0(r2), r1
    212e:	33be 	ld	r1, -4(r6)
    2130:	4281 	st	2(r2), r1
    2132:	e684 	stb	4(r2), r3
    2134:	d38c 	ldb	r1, 12(r6)
    2136:	e285 	stb	5(r2), r1
    2138:	5274 	movi	r1, 116
    213a:	5320 	movhi	r1, 32
    213c:	aa44 	jal	r5, r1
    213e:	2fc6 	addi	r7, r7, 6
      t++;
    2140:	33bc 	ld	r1, -8(r6)
    2142:	2241 	addi	r1, r1, 1
    2144:	43bc 	st	-8(r6), r1
      if (car=='\n') f++;
    2146:	35bf 	ld	r2, -2(r6)
    2148:	520a 	movi	r1, 10
    214a:	1299 	cmpeq	r1, r2, r1
    214c:	6205 	bz	r1, 12
    214e:	33bd 	ld	r1, -6(r6)
    2150:	2241 	addi	r1, r1, 1
    2152:	43bd 	st	-6(r6), r1
    2154:	5a00 	movi	r5, 0
    2156:	6a0d 	bz	r5, 28
      else if (car=='\r') c=1;
    2158:	33bf 	ld	r1, -2(r6)
    215a:	540d 	movi	r2, 13
    215c:	125a 	cmpeq	r1, r1, r2
    215e:	6204 	bz	r1, 10
    2160:	5201 	movi	r1, 1
    2162:	43be 	st	-4(r6), r1
    2164:	5a00 	movi	r5, 0
    2166:	6a05 	bz	r5, 12
      else if (car!=0) c++;   
    2168:	33bf 	ld	r1, -2(r6)
    216a:	6203 	bz	r1, 8
    216c:	33be 	ld	r1, -4(r6)
    216e:	2241 	addi	r1, r1, 1
    2170:	43be 	st	-4(r6), r1
    2172:	33bb 	ld	r1, -10(r6)
    2174:	2241 	addi	r1, r1, 1
    2176:	43bb 	st	-10(r6), r1
    2178:	33bb 	ld	r1, -10(r6)
    217a:	3585 	ld	r2, 10(r6)
    217c:	1242 	cmplt	r1, r1, r2
    217e:	5a18 	movi	r5, 24
    2180:	5b21 	movhi	r5, 33
    2182:	a341 	jnz	r1, r5
    }

  return t;
    2184:	33bc 	ld	r1, -8(r6)
}
    2186:	35c1 	ld	r2, 2(r7)
    2188:	37c0 	ld	r3, 0(r7)
    218a:	3dc7 	ld	r6, 14(r7)
    218c:	3bc8 	ld	r5, 16(r7)
    218e:	2fd2 	addi	r7, r7, 18
    2190:	a143 	jmp	r5

00002192 <reset_corre_letras>:




#define ANCHO_PANTALLA  80
#define LIMITE_LETRAS   13

/* colores */
#define NEGRO           0x00
#define BLANCO          0x3F
#define ROJO            0x03
#define VERDE           0x0C
#define AZUL            0x30
#define GRIS_OSCURO     0x15
#define AZUL_CIELO      0x3C
#define AMARILLO        0x0F
#define LILA            0x2A
#define GRIS_CLARO      0x2A
#define GRIS_MUY_CLARO  0x3F

char letras[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M'};
char colores[] = {BLANCO, ROJO, VERDE, AZUL, GRIS_OSCURO, AZUL_CIELO, AMARILLO, LILA, GRIS_CLARO, GRIS_MUY_CLARO, 0x1A, 0X21, 0X2B};
int divisores[] = {1,2,3,4,5,6,7,8,9,10,11,12,13};
char mensaje[] = "pulsa 'R' para reiniciar o 'P' para pausa.";

unsigned int tics_timer=1;     //variable global cuyo valor es modificado por la interrupcion de reloj
unsigned int tecla_pulsada=0;  //variable global cuyo valor es modificado por la interrupcion de teclado

struct letra_t
{
    int posicion;    // posicion dentro la linea
    char caracter;   // caracter a mostrar
    char color;      // color caracter

};

#define NUMERO_LETRAS  12
struct letra_t  letra[NUMERO_LETRAS];


void reset_corre_letras(void)
{
    2192:	2fe0 	addi	r7, r7, -32
    2194:	4bcf 	st	30(r7), r5
    2196:	4dce 	st	28(r7), r6
    2198:	2ddc 	addi	r6, r7, 28
    219a:	5acc 	movi	r5, -52
    219c:	0fe5 	add	r7, r7, r5
    219e:	41c3 	st	6(r7), r0
    21a0:	45c2 	st	4(r7), r2
    21a2:	47c1 	st	2(r7), r3
    21a4:	49c0 	st	0(r7), r4
    clear_screen();      // borrar pantalla
    21a6:	5200 	movi	r1, 0
    21a8:	5320 	movhi	r1, 32
    21aa:	aa44 	jal	r5, r1

    write(15, 19, mensaje, strlen_s(mensaje), ROJO);
    21ac:	2ffe 	addi	r7, r7, -2
    21ae:	25c0 	addi	r2, r7, 0
    21b0:	5234 	movi	r1, 52
    21b2:	5360 	movhi	r1, 96
    21b4:	4280 	st	0(r2), r1
    21b6:	52be 	movi	r1, -66
    21b8:	5320 	movhi	r1, 32
    21ba:	aa44 	jal	r5, r1
    21bc:	2fc2 	addi	r7, r7, 2
    21be:	2640 	addi	r3, r1, 0
    21c0:	2ff6 	addi	r7, r7, -10
    21c2:	25c0 	addi	r2, r7, 0
    21c4:	520f 	movi	r1, 15
    21c6:	4280 	st	0(r2), r1
    21c8:	5213 	movi	r1, 19
    21ca:	4281 	st	2(r2), r1
    21cc:	5234 	movi	r1, 52
    21ce:	5360 	movhi	r1, 96
    21d0:	4282 	st	4(r2), r1
    21d2:	4683 	st	6(r2), r3
    21d4:	5203 	movi	r1, 3
    21d6:	e288 	stb	8(r2), r1
    21d8:	52f6 	movi	r1, -10
    21da:	5320 	movhi	r1, 32
    21dc:	aa44 	jal	r5, r1
    21de:	2fca 	addi	r7, r7, 10
    int i;    
    for (i=0; i<NUMERO_LETRAS; i++) {
    21e0:	5200 	movi	r1, 0
    21e2:	43bf 	st	-2(r6), r1
    21e4:	5aa8 	movi	r5, -88
    21e6:	5b24 	movhi	r5, 36
    21e8:	a143 	jmp	r5
        letra[i].posicion=0;
    21ea:	35bf 	ld	r2, -2(r6)
    21ec:	5010 	movi	r0, 16
    21ee:	514a 	movhi	r0, 74
    21f0:	41b8 	st	-16(r6), r0
    21f2:	520f 	movi	r1, 15
    21f4:	0258 	not	r1, r1
    21f6:	2241 	addi	r1, r1, 1
    21f8:	02b1 	sha	r1, r2, r1
    21fa:	2680 	addi	r3, r2, 0
    21fc:	2840 	addi	r4, r1, 0
    21fe:	520e 	movi	r1, 14
    2200:	0258 	not	r1, r1
    2202:	2241 	addi	r1, r1, 1
    2204:	02f9 	shl	r1, r3, r1
    2206:	43b7 	st	-18(r6), r1
    2208:	5002 	movi	r0, 2
    220a:	5202 	movi	r1, 2
    220c:	43b6 	st	-20(r6), r1
    220e:	0530 	sha	r2, r4, r0
    2210:	31b7 	ld	r0, -18(r6)
    2212:	040a 	or	r2, r0, r2
    2214:	31b6 	ld	r0, -20(r6)
    2216:	02f0 	sha	r1, r3, r0
    2218:	37b8 	ld	r3, -16(r6)
    221a:	04e1 	add	r2, r3, r1
    221c:	5200 	movi	r1, 0
    221e:	4280 	st	0(r2), r1
        letra[i].caracter=letras[i];
    2220:	39bf 	ld	r4, -2(r6)
    2222:	49b9 	st	-14(r6), r4
    2224:	39bf 	ld	r4, -2(r6)
    2226:	5000 	movi	r0, 0
    2228:	5160 	movhi	r0, 96
    222a:	520f 	movi	r1, 15
    222c:	0258 	not	r1, r1
    222e:	2241 	addi	r1, r1, 1
    2230:	0731 	sha	r3, r4, r1
    2232:	2300 	addi	r1, r4, 0
    2234:	24c0 	addi	r2, r3, 0
    2236:	0221 	add	r1, r0, r1
    2238:	d240 	ldb	r1, 0(r1)
    223a:	43ba 	st	-12(r6), r1
    223c:	5010 	movi	r0, 16
    223e:	514a 	movhi	r0, 74
    2240:	41b5 	st	-22(r6), r0
    2242:	520f 	movi	r1, 15
    2244:	0258 	not	r1, r1
    2246:	2241 	addi	r1, r1, 1
    2248:	35b9 	ld	r2, -14(r6)
    224a:	06b1 	sha	r3, r2, r1
    224c:	39b9 	ld	r4, -14(r6)
    224e:	2300 	addi	r1, r4, 0
    2250:	24c0 	addi	r2, r3, 0
    2252:	560e 	movi	r3, 14
    2254:	06d8 	not	r3, r3
    2256:	26c1 	addi	r3, r3, 1
    2258:	067b 	shl	r3, r1, r3
    225a:	47b4 	st	-24(r6), r3
    225c:	5002 	movi	r0, 2
    225e:	5602 	movi	r3, 2
    2260:	47b3 	st	-26(r6), r3
    2262:	08b0 	sha	r4, r2, r0
    2264:	31b4 	ld	r0, -24(r6)
    2266:	080c 	or	r4, r0, r4
    2268:	31b3 	ld	r0, -26(r6)
    226a:	0670 	sha	r3, r1, r0
    226c:	5202 	movi	r1, 2
    226e:	43b1 	st	-30(r6), r1
    2270:	5400 	movi	r2, 0
    2272:	45b2 	st	-28(r6), r2
    2274:	31b1 	ld	r0, -30(r6)
    2276:	02e0 	add	r1, r3, r0
    2278:	50b8 	movi	r0, -72
    227a:	0026 	add	r0, r0, r6
    227c:	4200 	st	0(r0), r1
    227e:	52b8 	movi	r1, -72
    2280:	0266 	add	r1, r1, r6
    2282:	3240 	ld	r1, 0(r1)
    2284:	1463 	cmpltu	r2, r1, r3
    2286:	52bc 	movi	r1, -68
    2288:	0266 	add	r1, r1, r6
    228a:	4440 	st	0(r1), r2
    228c:	35b2 	ld	r2, -28(r6)
    228e:	0122 	add	r0, r4, r2
    2290:	54ba 	movi	r2, -70
    2292:	04a6 	add	r2, r2, r6
    2294:	4080 	st	0(r2), r0
    2296:	58bc 	movi	r4, -68
    2298:	0926 	add	r4, r4, r6
    229a:	3100 	ld	r0, 0(r4)
    229c:	58ba 	movi	r4, -70
    229e:	0926 	add	r4, r4, r6
    22a0:	3900 	ld	r4, 0(r4)
    22a2:	0624 	add	r3, r0, r4
    22a4:	22c0 	addi	r1, r3, 0
    22a6:	50ba 	movi	r0, -70
    22a8:	0026 	add	r0, r0, r6
    22aa:	4200 	st	0(r0), r1
    22ac:	37b5 	ld	r3, -22(r6)
    22ae:	54b8 	movi	r2, -72
    22b0:	04a6 	add	r2, r2, r6
    22b2:	3480 	ld	r2, 0(r2)
    22b4:	02e2 	add	r1, r3, r2
    22b6:	37ba 	ld	r3, -12(r6)
    22b8:	e640 	stb	0(r1), r3
        letra[i].color=colores[i];
    22ba:	39bf 	ld	r4, -2(r6)
    22bc:	49bb 	st	-10(r6), r4
    22be:	39bf 	ld	r4, -2(r6)
    22c0:	500d 	movi	r0, 13
    22c2:	5160 	movhi	r0, 96
    22c4:	520f 	movi	r1, 15
    22c6:	0258 	not	r1, r1
    22c8:	2241 	addi	r1, r1, 1
    22ca:	0731 	sha	r3, r4, r1
    22cc:	2300 	addi	r1, r4, 0
    22ce:	24c0 	addi	r2, r3, 0
    22d0:	0221 	add	r1, r0, r1
    22d2:	d240 	ldb	r1, 0(r1)
    22d4:	43bc 	st	-8(r6), r1
    22d6:	5010 	movi	r0, 16
    22d8:	514a 	movhi	r0, 74
    22da:	41b0 	st	-32(r6), r0
    22dc:	520f 	movi	r1, 15
    22de:	0258 	not	r1, r1
    22e0:	2241 	addi	r1, r1, 1
    22e2:	35bb 	ld	r2, -10(r6)
    22e4:	06b1 	sha	r3, r2, r1
    22e6:	39bb 	ld	r4, -10(r6)
    22e8:	2300 	addi	r1, r4, 0
    22ea:	24c0 	addi	r2, r3, 0
    22ec:	560e 	movi	r3, 14
    22ee:	06d8 	not	r3, r3
    22f0:	26c1 	addi	r3, r3, 1
    22f2:	067b 	shl	r3, r1, r3
    22f4:	47af 	st	-34(r6), r3
    22f6:	5002 	movi	r0, 2
    22f8:	5602 	movi	r3, 2
    22fa:	47ae 	st	-36(r6), r3
    22fc:	08b0 	sha	r4, r2, r0
    22fe:	31af 	ld	r0, -34(r6)
    2300:	080c 	or	r4, r0, r4
    2302:	31ae 	ld	r0, -36(r6)
    2304:	0670 	sha	r3, r1, r0
    2306:	5202 	movi	r1, 2
    2308:	43ac 	st	-40(r6), r1
    230a:	5400 	movi	r2, 0
    230c:	45ad 	st	-38(r6), r2
    230e:	31ac 	ld	r0, -40(r6)
    2310:	02e0 	add	r1, r3, r0
    2312:	50b8 	movi	r0, -72
    2314:	0026 	add	r0, r0, r6
    2316:	4200 	st	0(r0), r1
    2318:	52b8 	movi	r1, -72
    231a:	0266 	add	r1, r1, r6
    231c:	3240 	ld	r1, 0(r1)
    231e:	1463 	cmpltu	r2, r1, r3
    2320:	52bc 	movi	r1, -68
    2322:	0266 	add	r1, r1, r6
    2324:	4440 	st	0(r1), r2
    2326:	35ad 	ld	r2, -38(r6)
    2328:	0122 	add	r0, r4, r2
    232a:	54ba 	movi	r2, -70
    232c:	04a6 	add	r2, r2, r6
    232e:	4080 	st	0(r2), r0
    2330:	58bc 	movi	r4, -68
    2332:	0926 	add	r4, r4, r6
    2334:	3100 	ld	r0, 0(r4)
    2336:	58ba 	movi	r4, -70
    2338:	0926 	add	r4, r4, r6
    233a:	3900 	ld	r4, 0(r4)
    233c:	0624 	add	r3, r0, r4
    233e:	22c0 	addi	r1, r3, 0
    2340:	50ba 	movi	r0, -70
    2342:	0026 	add	r0, r0, r6
    2344:	4200 	st	0(r0), r1
    2346:	37b0 	ld	r3, -32(r6)
    2348:	54b8 	movi	r2, -72
    234a:	04a6 	add	r2, r2, r6
    234c:	3480 	ld	r2, 0(r2)
    234e:	02e2 	add	r1, r3, r2
    2350:	37bc 	ld	r3, -8(r6)
    2352:	e641 	stb	1(r1), r3
        mostrar_nueva_posicion(i,letra[i].posicion,letra[i].caracter,letra[i].color);
    2354:	35bf 	ld	r2, -2(r6)
    2356:	5810 	movi	r4, 16
    2358:	594a 	movhi	r4, 74
    235a:	49ab 	st	-42(r6), r4
    235c:	520f 	movi	r1, 15
    235e:	0258 	not	r1, r1
    2360:	2241 	addi	r1, r1, 1
    2362:	02b1 	sha	r1, r2, r1
    2364:	2680 	addi	r3, r2, 0
    2366:	2840 	addi	r4, r1, 0
    2368:	520e 	movi	r1, 14
    236a:	0258 	not	r1, r1
    236c:	2241 	addi	r1, r1, 1
    236e:	02f9 	shl	r1, r3, r1
    2370:	43aa 	st	-44(r6), r1
    2372:	5002 	movi	r0, 2
    2374:	5202 	movi	r1, 2
    2376:	43a9 	st	-46(r6), r1
    2378:	0530 	sha	r2, r4, r0
    237a:	31aa 	ld	r0, -44(r6)
    237c:	040a 	or	r2, r0, r2
    237e:	31a9 	ld	r0, -46(r6)
    2380:	02f0 	sha	r1, r3, r0
    2382:	37ab 	ld	r3, -42(r6)
    2384:	02e1 	add	r1, r3, r1
    2386:	3240 	ld	r1, 0(r1)
    2388:	43bd 	st	-6(r6), r1
    238a:	39bf 	ld	r4, -2(r6)
    238c:	5010 	movi	r0, 16
    238e:	514a 	movhi	r0, 74
    2390:	41a8 	st	-48(r6), r0
    2392:	520f 	movi	r1, 15
    2394:	0258 	not	r1, r1
    2396:	2241 	addi	r1, r1, 1
    2398:	0731 	sha	r3, r4, r1
    239a:	2300 	addi	r1, r4, 0
    239c:	24c0 	addi	r2, r3, 0
    239e:	560e 	movi	r3, 14
    23a0:	06d8 	not	r3, r3
    23a2:	26c1 	addi	r3, r3, 1
    23a4:	067b 	shl	r3, r1, r3
    23a6:	47a7 	st	-50(r6), r3
    23a8:	5002 	movi	r0, 2
    23aa:	5602 	movi	r3, 2
    23ac:	47a6 	st	-52(r6), r3
    23ae:	08b0 	sha	r4, r2, r0
    23b0:	31a7 	ld	r0, -50(r6)
    23b2:	080c 	or	r4, r0, r4
    23b4:	31a6 	ld	r0, -52(r6)
    23b6:	0670 	sha	r3, r1, r0
    23b8:	5202 	movi	r1, 2
    23ba:	43a4 	st	-56(r6), r1
    23bc:	5400 	movi	r2, 0
    23be:	45a5 	st	-54(r6), r2
    23c0:	31a4 	ld	r0, -56(r6)
    23c2:	02e0 	add	r1, r3, r0
    23c4:	50b8 	movi	r0, -72
    23c6:	0026 	add	r0, r0, r6
    23c8:	4200 	st	0(r0), r1
    23ca:	52b8 	movi	r1, -72
    23cc:	0266 	add	r1, r1, r6
    23ce:	3240 	ld	r1, 0(r1)
    23d0:	1463 	cmpltu	r2, r1, r3
    23d2:	52bc 	movi	r1, -68
    23d4:	0266 	add	r1, r1, r6
    23d6:	4440 	st	0(r1), r2
    23d8:	35a5 	ld	r2, -54(r6)
    23da:	0122 	add	r0, r4, r2
    23dc:	54ba 	movi	r2, -70
    23de:	04a6 	add	r2, r2, r6
    23e0:	4080 	st	0(r2), r0
    23e2:	58bc 	movi	r4, -68
    23e4:	0926 	add	r4, r4, r6
    23e6:	3100 	ld	r0, 0(r4)
    23e8:	58ba 	movi	r4, -70
    23ea:	0926 	add	r4, r4, r6
    23ec:	3900 	ld	r4, 0(r4)
    23ee:	0624 	add	r3, r0, r4
    23f0:	22c0 	addi	r1, r3, 0
    23f2:	50ba 	movi	r0, -70
    23f4:	0026 	add	r0, r0, r6
    23f6:	4200 	st	0(r0), r1
    23f8:	37a8 	ld	r3, -48(r6)
    23fa:	54b8 	movi	r2, -72
    23fc:	04a6 	add	r2, r2, r6
    23fe:	3480 	ld	r2, 0(r2)
    2400:	02e2 	add	r1, r3, r2
    2402:	d240 	ldb	r1, 0(r1)
    2404:	43be 	st	-4(r6), r1
    2406:	39bf 	ld	r4, -2(r6)
    2408:	5610 	movi	r3, 16
    240a:	574a 	movhi	r3, 74
    240c:	47a3 	st	-58(r6), r3
    240e:	520f 	movi	r1, 15
    2410:	0258 	not	r1, r1
    2412:	2241 	addi	r1, r1, 1
    2414:	0731 	sha	r3, r4, r1
    2416:	2300 	addi	r1, r4, 0
    2418:	24c0 	addi	r2, r3, 0
    241a:	560e 	movi	r3, 14
    241c:	06d8 	not	r3, r3
    241e:	26c1 	addi	r3, r3, 1
    2420:	067b 	shl	r3, r1, r3
    2422:	47a2 	st	-60(r6), r3
    2424:	5002 	movi	r0, 2
    2426:	5802 	movi	r4, 2
    2428:	49a1 	st	-62(r6), r4
    242a:	08b0 	sha	r4, r2, r0
    242c:	31a2 	ld	r0, -60(r6)
    242e:	080c 	or	r4, r0, r4
    2430:	31a1 	ld	r0, -62(r6)
    2432:	0670 	sha	r3, r1, r0
    2434:	5402 	movi	r2, 2
    2436:	52be 	movi	r1, -66
    2438:	0266 	add	r1, r1, r6
    243a:	4440 	st	0(r1), r2
    243c:	5000 	movi	r0, 0
    243e:	41a0 	st	-64(r6), r0
    2440:	52be 	movi	r1, -66
    2442:	0266 	add	r1, r1, r6
    2444:	3240 	ld	r1, 0(r1)
    2446:	04e1 	add	r2, r3, r1
    2448:	52b8 	movi	r1, -72
    244a:	0266 	add	r1, r1, r6
    244c:	4440 	st	0(r1), r2
    244e:	54b8 	movi	r2, -72
    2450:	04a6 	add	r2, r2, r6
    2452:	3480 	ld	r2, 0(r2)
    2454:	10a3 	cmpltu	r0, r2, r3
    2456:	54bc 	movi	r2, -68
    2458:	04a6 	add	r2, r2, r6
    245a:	4080 	st	0(r2), r0
    245c:	31a0 	ld	r0, -64(r6)
    245e:	0320 	add	r1, r4, r0
    2460:	50ba 	movi	r0, -70
    2462:	0026 	add	r0, r0, r6
    2464:	4200 	st	0(r0), r1
    2466:	52bc 	movi	r1, -68
    2468:	0266 	add	r1, r1, r6
    246a:	3440 	ld	r2, 0(r1)
    246c:	52ba 	movi	r1, -70
    246e:	0266 	add	r1, r1, r6
    2470:	3240 	ld	r1, 0(r1)
    2472:	06a1 	add	r3, r2, r1
    2474:	28c0 	addi	r4, r3, 0
    2476:	54ba 	movi	r2, -70
    2478:	04a6 	add	r2, r2, r6
    247a:	4880 	st	0(r2), r4
    247c:	35a3 	ld	r2, -58(r6)
    247e:	50b8 	movi	r0, -72
    2480:	0026 	add	r0, r0, r6
    2482:	3000 	ld	r0, 0(r0)
    2484:	02a0 	add	r1, r2, r0
    2486:	d641 	ldb	r3, 1(r1)
    2488:	2ffa 	addi	r7, r7, -6
    248a:	23c0 	addi	r1, r7, 0
    248c:	35bf 	ld	r2, -2(r6)
    248e:	4440 	st	0(r1), r2
    2490:	35bd 	ld	r2, -6(r6)
    2492:	4441 	st	2(r1), r2
    2494:	39be 	ld	r4, -4(r6)
    2496:	e844 	stb	4(r1), r4
    2498:	e645 	stb	5(r1), r3
    249a:	5274 	movi	r1, 116
    249c:	5320 	movhi	r1, 32
    249e:	aa44 	jal	r5, r1
    24a0:	2fc6 	addi	r7, r7, 6
    24a2:	33bf 	ld	r1, -2(r6)
    24a4:	2241 	addi	r1, r1, 1
    24a6:	43bf 	st	-2(r6), r1
    24a8:	33bf 	ld	r1, -2(r6)
    24aa:	540b 	movi	r2, 11
    24ac:	124a 	cmple	r1, r1, r2
    24ae:	5aea 	movi	r5, -22
    24b0:	5b21 	movhi	r5, 33
    24b2:	a341 	jnz	r1, r5
    }
}
    24b4:	31c3 	ld	r0, 6(r7)
    24b6:	35c2 	ld	r2, 4(r7)
    24b8:	37c1 	ld	r3, 2(r7)
    24ba:	39c0 	ld	r4, 0(r7)
    24bc:	2f80 	addi	r7, r6, 0
    24be:	3dc0 	ld	r6, 0(r7)
    24c0:	3bc1 	ld	r5, 2(r7)
    24c2:	2fc4 	addi	r7, r7, 4
    24c4:	a143 	jmp	r5

000024c6 <mainC>:


int mainC (void) {
    24c6:	2fe0 	addi	r7, r7, -32
    24c8:	4bcf 	st	30(r7), r5
    24ca:	4dce 	st	28(r7), r6
    24cc:	2ddc 	addi	r6, r7, 28
    24ce:	5ac2 	movi	r5, -62
    24d0:	0fe5 	add	r7, r7, r5
    24d2:	41c3 	st	6(r7), r0
    24d4:	45c2 	st	4(r7), r2
    24d6:	47c1 	st	2(r7), r3
    24d8:	49c0 	st	0(r7), r4

    unsigned int tics_anterior=0;
    24da:	5200 	movi	r1, 0
    24dc:	43bd 	st	-6(r6), r1
    int pause=0;
    24de:	5200 	movi	r1, 0
    24e0:	43be 	st	-4(r6), r1
    
    if (NUMERO_LETRAS<=LIMITE_LETRAS) {
        
        reset_corre_letras();
    24e2:	5292 	movi	r1, -110
    24e4:	5321 	movhi	r1, 33
    24e6:	aa44 	jal	r5, r1

        while (1) {
            switch (tecla_pulsada)
    24e8:	5202 	movi	r1, 2
    24ea:	534a 	movhi	r1, 74
    24ec:	3240 	ld	r1, 0(r1)
    24ee:	43b7 	st	-18(r6), r1
    24f0:	5252 	movi	r1, 82
    24f2:	31b7 	ld	r0, -18(r6)
    24f4:	1219 	cmpeq	r1, r0, r1
    24f6:	6315 	bnz	r1, 44
    24f8:	5252 	movi	r1, 82
    24fa:	35b7 	ld	r2, -18(r6)
    24fc:	12a9 	cmpleu	r1, r2, r1
    24fe:	6207 	bz	r1, 16
    2500:	5250 	movi	r1, 80
    2502:	37b7 	ld	r3, -18(r6)
    2504:	12d9 	cmpeq	r1, r3, r1
    2506:	6316 	bnz	r1, 46
    2508:	5a4c 	movi	r5, 76
    250a:	5b25 	movhi	r5, 37
    250c:	a143 	jmp	r5
    250e:	5270 	movi	r1, 112
    2510:	39b7 	ld	r4, -18(r6)
    2512:	1319 	cmpeq	r1, r4, r1
    2514:	630f 	bnz	r1, 32
    2516:	5272 	movi	r1, 114
    2518:	31b7 	ld	r0, -18(r6)
    251a:	1219 	cmpeq	r1, r0, r1
    251c:	6302 	bnz	r1, 6
    251e:	5a00 	movi	r5, 0
    2520:	6a15 	bz	r5, 44
            {
            case 'r':    case 'R':
                reset_corre_letras();
    2522:	5292 	movi	r1, -110
    2524:	5321 	movhi	r1, 33
    2526:	aa44 	jal	r5, r1
                tecla_pulsada=0;
    2528:	5402 	movi	r2, 2
    252a:	554a 	movhi	r2, 74
    252c:	5200 	movi	r1, 0
    252e:	4280 	st	0(r2), r1
                break;
    2530:	5a00 	movi	r5, 0
    2532:	6a0c 	bz	r5, 26

            case 'p':    case 'P':
                if (pause==0) pause=1; else pause=0;
    2534:	33be 	ld	r1, -4(r6)
    2536:	6304 	bnz	r1, 10
    2538:	5201 	movi	r1, 1
    253a:	43be 	st	-4(r6), r1
    253c:	5a00 	movi	r5, 0
    253e:	6a02 	bz	r5, 6
    2540:	5200 	movi	r1, 0
    2542:	43be 	st	-4(r6), r1
                tecla_pulsada=0;
    2544:	5402 	movi	r2, 2
    2546:	554a 	movhi	r2, 74
    2548:	5200 	movi	r1, 0
    254a:	4280 	st	0(r2), r1
                break;

            default:
                break;
            }

            if (pause==0) {
    254c:	33be 	ld	r1, -4(r6)
    254e:	5ae8 	movi	r5, -24
    2550:	5b24 	movhi	r5, 36
    2552:	a341 	jnz	r1, r5
                // para DEBUG: mostramos los valores del timer por los leds verdes
                __asm__ ( "out %0, %1" 
    2554:	5260 	movi	r1, 96
    2556:	5360 	movhi	r1, 96
    2558:	3240 	ld	r1, 0(r1)
    255a:	7305 	out	5, r1
                        : /* sin salidas*/
                        : "i" (5), "r" (tics_timer));
                // fin DEBUG

                if (tics_timer!=tics_anterior) {
    255c:	5260 	movi	r1, 96
    255e:	5360 	movhi	r1, 96
    2560:	3440 	ld	r2, 0(r1)
    2562:	33bd 	ld	r1, -6(r6)
    2564:	1299 	cmpeq	r1, r2, r1
    2566:	5ae8 	movi	r5, -24
    2568:	5b24 	movhi	r5, 36
    256a:	a341 	jnz	r1, r5
                    tics_anterior=tics_timer;
    256c:	5260 	movi	r1, 96
    256e:	5360 	movhi	r1, 96
    2570:	3240 	ld	r1, 0(r1)
    2572:	43bd 	st	-6(r6), r1

                    int fila;
                    for (fila=0; fila<NUMERO_LETRAS; fila++) {
    2574:	5200 	movi	r1, 0
    2576:	43bf 	st	-2(r6), r1
    2578:	5a6c 	movi	r5, 108
    257a:	5b28 	movhi	r5, 40
    257c:	a143 	jmp	r5
                        if (tics_timer%divisores[fila]==0) {
    257e:	5260 	movi	r1, 96
    2580:	5360 	movhi	r1, 96
    2582:	3240 	ld	r1, 0(r1)
    2584:	43b8 	st	-16(r6), r1
    2586:	39bf 	ld	r4, -2(r6)
    2588:	521a 	movi	r1, 26
    258a:	5360 	movhi	r1, 96
    258c:	43b6 	st	-20(r6), r1
    258e:	520f 	movi	r1, 15
    2590:	0258 	not	r1, r1
    2592:	2241 	addi	r1, r1, 1
    2594:	0731 	sha	r3, r4, r1
    2596:	2300 	addi	r1, r4, 0
    2598:	24c0 	addi	r2, r3, 0
    259a:	0661 	add	r3, r1, r1
    259c:	10e1 	cmpltu	r0, r3, r1
    259e:	08a2 	add	r4, r2, r2
    25a0:	0224 	add	r1, r0, r4
    25a2:	2840 	addi	r4, r1, 0
    25a4:	35b6 	ld	r2, -20(r6)
    25a6:	02a3 	add	r1, r2, r3
    25a8:	3240 	ld	r1, 0(r1)
    25aa:	2440 	addi	r2, r1, 0
    25ac:	37b8 	ld	r3, -16(r6)
    25ae:	82ea 	divu	r1, r3, r2
    25b0:	8242 	mul	r1, r1, r2
    25b2:	35b8 	ld	r2, -16(r6)
    25b4:	02a9 	sub	r1, r2, r1
    25b6:	5a66 	movi	r5, 102
    25b8:	5b28 	movhi	r5, 40
    25ba:	a341 	jnz	r1, r5
                            borrar_letra(fila,letra[fila].posicion);
    25bc:	35bf 	ld	r2, -2(r6)
    25be:	5810 	movi	r4, 16
    25c0:	594a 	movhi	r4, 74
    25c2:	49b5 	st	-22(r6), r4
    25c4:	520f 	movi	r1, 15
    25c6:	0258 	not	r1, r1
    25c8:	2241 	addi	r1, r1, 1
    25ca:	02b1 	sha	r1, r2, r1
    25cc:	2680 	addi	r3, r2, 0
    25ce:	2840 	addi	r4, r1, 0
    25d0:	520e 	movi	r1, 14
    25d2:	0258 	not	r1, r1
    25d4:	2241 	addi	r1, r1, 1
    25d6:	02f9 	shl	r1, r3, r1
    25d8:	43b4 	st	-24(r6), r1
    25da:	5002 	movi	r0, 2
    25dc:	5202 	movi	r1, 2
    25de:	43b3 	st	-26(r6), r1
    25e0:	0530 	sha	r2, r4, r0
    25e2:	31b4 	ld	r0, -24(r6)
    25e4:	040a 	or	r2, r0, r2
    25e6:	31b3 	ld	r0, -26(r6)
    25e8:	02f0 	sha	r1, r3, r0
    25ea:	37b5 	ld	r3, -22(r6)
    25ec:	02e1 	add	r1, r3, r1
    25ee:	3640 	ld	r3, 0(r1)
    25f0:	2ffc 	addi	r7, r7, -4
    25f2:	25c0 	addi	r2, r7, 0
    25f4:	33bf 	ld	r1, -2(r6)
    25f6:	4280 	st	0(r2), r1
    25f8:	4681 	st	2(r2), r3
    25fa:	5232 	movi	r1, 50
    25fc:	5320 	movhi	r1, 32
    25fe:	aa44 	jal	r5, r1
    2600:	2fc4 	addi	r7, r7, 4
                            if (letra[fila].posicion<80)
    2602:	35bf 	ld	r2, -2(r6)
    2604:	5810 	movi	r4, 16
    2606:	594a 	movhi	r4, 74
    2608:	49b2 	st	-28(r6), r4
    260a:	520f 	movi	r1, 15
    260c:	0258 	not	r1, r1
    260e:	2241 	addi	r1, r1, 1
    2610:	02b1 	sha	r1, r2, r1
    2612:	2680 	addi	r3, r2, 0
    2614:	2840 	addi	r4, r1, 0
    2616:	520e 	movi	r1, 14
    2618:	0258 	not	r1, r1
    261a:	2241 	addi	r1, r1, 1
    261c:	02f9 	shl	r1, r3, r1
    261e:	43b1 	st	-30(r6), r1
    2620:	5002 	movi	r0, 2
    2622:	5202 	movi	r1, 2
    2624:	43b0 	st	-32(r6), r1
    2626:	0530 	sha	r2, r4, r0
    2628:	31b1 	ld	r0, -30(r6)
    262a:	040a 	or	r2, r0, r2
    262c:	31b0 	ld	r0, -32(r6)
    262e:	02f0 	sha	r1, r3, r0
    2630:	37b2 	ld	r3, -28(r6)
    2632:	02e1 	add	r1, r3, r1
    2634:	3440 	ld	r2, 0(r1)
    2636:	524f 	movi	r1, 79
    2638:	1289 	cmple	r1, r2, r1
    263a:	5aba 	movi	r5, -70
    263c:	5b26 	movhi	r5, 38
    263e:	a340 	jz	r1, r5
                                letra[fila].posicion++;
    2640:	39bf 	ld	r4, -2(r6)
    2642:	49b9 	st	-14(r6), r4
    2644:	5010 	movi	r0, 16
    2646:	514a 	movhi	r0, 74
    2648:	41af 	st	-34(r6), r0
    264a:	520f 	movi	r1, 15
    264c:	0258 	not	r1, r1
    264e:	2241 	addi	r1, r1, 1
    2650:	35b9 	ld	r2, -14(r6)
    2652:	02b1 	sha	r1, r2, r1
    2654:	31b9 	ld	r0, -14(r6)
    2656:	2600 	addi	r3, r0, 0
    2658:	2840 	addi	r4, r1, 0
    265a:	520e 	movi	r1, 14
    265c:	0258 	not	r1, r1
    265e:	2241 	addi	r1, r1, 1
    2660:	02f9 	shl	r1, r3, r1
    2662:	43ae 	st	-36(r6), r1
    2664:	5002 	movi	r0, 2
    2666:	5202 	movi	r1, 2
    2668:	43ad 	st	-38(r6), r1
    266a:	0530 	sha	r2, r4, r0
    266c:	31ae 	ld	r0, -36(r6)
    266e:	040a 	or	r2, r0, r2
    2670:	31ad 	ld	r0, -38(r6)
    2672:	02f0 	sha	r1, r3, r0
    2674:	37af 	ld	r3, -34(r6)
    2676:	02e1 	add	r1, r3, r1
    2678:	3240 	ld	r1, 0(r1)
    267a:	2241 	addi	r1, r1, 1
    267c:	43ba 	st	-12(r6), r1
    267e:	5810 	movi	r4, 16
    2680:	594a 	movhi	r4, 74
    2682:	49ac 	st	-40(r6), r4
    2684:	520f 	movi	r1, 15
    2686:	0258 	not	r1, r1
    2688:	2241 	addi	r1, r1, 1
    268a:	31b9 	ld	r0, -14(r6)
    268c:	0231 	sha	r1, r0, r1
    268e:	35b9 	ld	r2, -14(r6)
    2690:	2680 	addi	r3, r2, 0
    2692:	2840 	addi	r4, r1, 0
    2694:	520e 	movi	r1, 14
    2696:	0258 	not	r1, r1
    2698:	2241 	addi	r1, r1, 1
    269a:	02f9 	shl	r1, r3, r1
    269c:	43ab 	st	-42(r6), r1
    269e:	5002 	movi	r0, 2
    26a0:	5202 	movi	r1, 2
    26a2:	43aa 	st	-44(r6), r1
    26a4:	0530 	sha	r2, r4, r0
    26a6:	31ab 	ld	r0, -42(r6)
    26a8:	040a 	or	r2, r0, r2
    26aa:	31aa 	ld	r0, -44(r6)
    26ac:	02f0 	sha	r1, r3, r0
    26ae:	37ac 	ld	r3, -40(r6)
    26b0:	02e1 	add	r1, r3, r1
    26b2:	39ba 	ld	r4, -12(r6)
    26b4:	4840 	st	0(r1), r4
    26b6:	5a00 	movi	r5, 0
    26b8:	6a1b 	bz	r5, 56
                            else
                                letra[fila].posicion=0;
    26ba:	35bf 	ld	r2, -2(r6)
    26bc:	5010 	movi	r0, 16
    26be:	514a 	movhi	r0, 74
    26c0:	41a9 	st	-46(r6), r0
    26c2:	520f 	movi	r1, 15
    26c4:	0258 	not	r1, r1
    26c6:	2241 	addi	r1, r1, 1
    26c8:	02b1 	sha	r1, r2, r1
    26ca:	2680 	addi	r3, r2, 0
    26cc:	2840 	addi	r4, r1, 0
    26ce:	520e 	movi	r1, 14
    26d0:	0258 	not	r1, r1
    26d2:	2241 	addi	r1, r1, 1
    26d4:	02f9 	shl	r1, r3, r1
    26d6:	43a8 	st	-48(r6), r1
    26d8:	5002 	movi	r0, 2
    26da:	5202 	movi	r1, 2
    26dc:	43a7 	st	-50(r6), r1
    26de:	0530 	sha	r2, r4, r0
    26e0:	31a8 	ld	r0, -48(r6)
    26e2:	040a 	or	r2, r0, r2
    26e4:	31a7 	ld	r0, -50(r6)
    26e6:	02f0 	sha	r1, r3, r0
    26e8:	37a9 	ld	r3, -46(r6)
    26ea:	04e1 	add	r2, r3, r1
    26ec:	5200 	movi	r1, 0
    26ee:	4280 	st	0(r2), r1

                            mostrar_nueva_posicion(fila,letra[fila].posicion,letra[fila].caracter,letra[fila].color);
    26f0:	35bf 	ld	r2, -2(r6)
    26f2:	5810 	movi	r4, 16
    26f4:	594a 	movhi	r4, 74
    26f6:	49a6 	st	-52(r6), r4
    26f8:	520f 	movi	r1, 15
    26fa:	0258 	not	r1, r1
    26fc:	2241 	addi	r1, r1, 1
    26fe:	02b1 	sha	r1, r2, r1
    2700:	2680 	addi	r3, r2, 0
    2702:	2840 	addi	r4, r1, 0
    2704:	520e 	movi	r1, 14
    2706:	0258 	not	r1, r1
    2708:	2241 	addi	r1, r1, 1
    270a:	02f9 	shl	r1, r3, r1
    270c:	43a5 	st	-54(r6), r1
    270e:	5002 	movi	r0, 2
    2710:	5202 	movi	r1, 2
    2712:	43a4 	st	-56(r6), r1
    2714:	0530 	sha	r2, r4, r0
    2716:	31a5 	ld	r0, -54(r6)
    2718:	040a 	or	r2, r0, r2
    271a:	31a4 	ld	r0, -56(r6)
    271c:	02f0 	sha	r1, r3, r0
    271e:	37a6 	ld	r3, -52(r6)
    2720:	02e1 	add	r1, r3, r1
    2722:	3240 	ld	r1, 0(r1)
    2724:	43bb 	st	-10(r6), r1
    2726:	39bf 	ld	r4, -2(r6)
    2728:	5010 	movi	r0, 16
    272a:	514a 	movhi	r0, 74
    272c:	41a3 	st	-58(r6), r0
    272e:	520f 	movi	r1, 15
    2730:	0258 	not	r1, r1
    2732:	2241 	addi	r1, r1, 1
    2734:	0731 	sha	r3, r4, r1
    2736:	2300 	addi	r1, r4, 0
    2738:	24c0 	addi	r2, r3, 0
    273a:	560e 	movi	r3, 14
    273c:	06d8 	not	r3, r3
    273e:	26c1 	addi	r3, r3, 1
    2740:	067b 	shl	r3, r1, r3
    2742:	47a2 	st	-60(r6), r3
    2744:	5002 	movi	r0, 2
    2746:	5602 	movi	r3, 2
    2748:	47a1 	st	-62(r6), r3
    274a:	08b0 	sha	r4, r2, r0
    274c:	31a2 	ld	r0, -60(r6)
    274e:	080c 	or	r4, r0, r4
    2750:	31a1 	ld	r0, -62(r6)
    2752:	0670 	sha	r3, r1, r0
    2754:	5402 	movi	r2, 2
    2756:	52be 	movi	r1, -66
    2758:	0266 	add	r1, r1, r6
    275a:	4440 	st	0(r1), r2
    275c:	5000 	movi	r0, 0
    275e:	41a0 	st	-64(r6), r0
    2760:	52be 	movi	r1, -66
    2762:	0266 	add	r1, r1, r6
    2764:	3240 	ld	r1, 0(r1)
    2766:	04e1 	add	r2, r3, r1
    2768:	52ae 	movi	r1, -82
    276a:	0266 	add	r1, r1, r6
    276c:	4440 	st	0(r1), r2
    276e:	54ae 	movi	r2, -82
    2770:	04a6 	add	r2, r2, r6
    2772:	3480 	ld	r2, 0(r2)
    2774:	10a3 	cmpltu	r0, r2, r3
    2776:	54b2 	movi	r2, -78
    2778:	04a6 	add	r2, r2, r6
    277a:	4080 	st	0(r2), r0
    277c:	31a0 	ld	r0, -64(r6)
    277e:	0320 	add	r1, r4, r0
    2780:	50b0 	movi	r0, -80
    2782:	0026 	add	r0, r0, r6
    2784:	4200 	st	0(r0), r1
    2786:	52b2 	movi	r1, -78
    2788:	0266 	add	r1, r1, r6
    278a:	3440 	ld	r2, 0(r1)
    278c:	52b0 	movi	r1, -80
    278e:	0266 	add	r1, r1, r6
    2790:	3240 	ld	r1, 0(r1)
    2792:	06a1 	add	r3, r2, r1
    2794:	28c0 	addi	r4, r3, 0
    2796:	54b0 	movi	r2, -80
    2798:	04a6 	add	r2, r2, r6
    279a:	4880 	st	0(r2), r4
    279c:	35a3 	ld	r2, -58(r6)
    279e:	50ae 	movi	r0, -82
    27a0:	0026 	add	r0, r0, r6
    27a2:	3000 	ld	r0, 0(r0)
    27a4:	02a0 	add	r1, r2, r0
    27a6:	d240 	ldb	r1, 0(r1)
    27a8:	43bc 	st	-8(r6), r1
    27aa:	39bf 	ld	r4, -2(r6)
    27ac:	5410 	movi	r2, 16
    27ae:	554a 	movhi	r2, 74
    27b0:	52bc 	movi	r1, -68
    27b2:	0266 	add	r1, r1, r6
    27b4:	4440 	st	0(r1), r2
    27b6:	520f 	movi	r1, 15
    27b8:	0258 	not	r1, r1
    27ba:	2241 	addi	r1, r1, 1
    27bc:	0731 	sha	r3, r4, r1
    27be:	2300 	addi	r1, r4, 0
    27c0:	24c0 	addi	r2, r3, 0
    27c2:	560e 	movi	r3, 14
    27c4:	06d8 	not	r3, r3
    27c6:	26c1 	addi	r3, r3, 1
    27c8:	007b 	shl	r0, r1, r3
    27ca:	58ba 	movi	r4, -70
    27cc:	0926 	add	r4, r4, r6
    27ce:	4100 	st	0(r4), r0
    27d0:	5002 	movi	r0, 2
    27d2:	5802 	movi	r4, 2
    27d4:	56b8 	movi	r3, -72
    27d6:	06e6 	add	r3, r3, r6
    27d8:	48c0 	st	0(r3), r4
    27da:	08b0 	sha	r4, r2, r0
    27dc:	50ba 	movi	r0, -70
    27de:	0026 	add	r0, r0, r6
    27e0:	3000 	ld	r0, 0(r0)
    27e2:	080c 	or	r4, r0, r4
    27e4:	50b8 	movi	r0, -72
    27e6:	0026 	add	r0, r0, r6
    27e8:	3000 	ld	r0, 0(r0)
    27ea:	0670 	sha	r3, r1, r0
    27ec:	5402 	movi	r2, 2
    27ee:	52b4 	movi	r1, -76
    27f0:	0266 	add	r1, r1, r6
    27f2:	4440 	st	0(r1), r2
    27f4:	5200 	movi	r1, 0
    27f6:	50b6 	movi	r0, -74
    27f8:	0026 	add	r0, r0, r6
    27fa:	4200 	st	0(r0), r1
    27fc:	54b4 	movi	r2, -76
    27fe:	04a6 	add	r2, r2, r6
    2800:	3480 	ld	r2, 0(r2)
    2802:	00e2 	add	r0, r3, r2
    2804:	54ae 	movi	r2, -82
    2806:	04a6 	add	r2, r2, r6
    2808:	4080 	st	0(r2), r0
    280a:	50ae 	movi	r0, -82
    280c:	0026 	add	r0, r0, r6
    280e:	3000 	ld	r0, 0(r0)
    2810:	1223 	cmpltu	r1, r0, r3
    2812:	50b2 	movi	r0, -78
    2814:	0026 	add	r0, r0, r6
    2816:	4200 	st	0(r0), r1
    2818:	52b6 	movi	r1, -74
    281a:	0266 	add	r1, r1, r6
    281c:	3240 	ld	r1, 0(r1)
    281e:	0521 	add	r2, r4, r1
    2820:	52b0 	movi	r1, -80
    2822:	0266 	add	r1, r1, r6
    2824:	4440 	st	0(r1), r2
    2826:	54b2 	movi	r2, -78
    2828:	04a6 	add	r2, r2, r6
    282a:	3880 	ld	r4, 0(r2)
    282c:	54b0 	movi	r2, -80
    282e:	04a6 	add	r2, r2, r6
    2830:	3480 	ld	r2, 0(r2)
    2832:	0722 	add	r3, r4, r2
    2834:	20c0 	addi	r0, r3, 0
    2836:	58b0 	movi	r4, -80
    2838:	0926 	add	r4, r4, r6
    283a:	4100 	st	0(r4), r0
    283c:	54bc 	movi	r2, -68
    283e:	04a6 	add	r2, r2, r6
    2840:	3680 	ld	r3, 0(r2)
    2842:	54ae 	movi	r2, -82
    2844:	04a6 	add	r2, r2, r6
    2846:	3480 	ld	r2, 0(r2)
    2848:	02e2 	add	r1, r3, r2
    284a:	d641 	ldb	r3, 1(r1)
    284c:	2ffa 	addi	r7, r7, -6
    284e:	23c0 	addi	r1, r7, 0
    2850:	35bf 	ld	r2, -2(r6)
    2852:	4440 	st	0(r1), r2
    2854:	39bb 	ld	r4, -10(r6)
    2856:	4841 	st	2(r1), r4
    2858:	31bc 	ld	r0, -8(r6)
    285a:	e044 	stb	4(r1), r0
    285c:	e645 	stb	5(r1), r3
    285e:	5274 	movi	r1, 116
    2860:	5320 	movhi	r1, 32
    2862:	aa44 	jal	r5, r1
    2864:	2fc6 	addi	r7, r7, 6
    2866:	33bf 	ld	r1, -2(r6)
    2868:	2241 	addi	r1, r1, 1
    286a:	43bf 	st	-2(r6), r1
    286c:	33bf 	ld	r1, -2(r6)
    286e:	540b 	movi	r2, 11
    2870:	124a 	cmple	r1, r1, r2
    2872:	5a7e 	movi	r5, 126
    2874:	5b25 	movhi	r5, 37
    2876:	a341 	jnz	r1, r5
                        }
                    }
                }
            }
        }
    2878:	5ae8 	movi	r5, -24
    287a:	5b24 	movhi	r5, 36
    287c:	a143 	jmp	r5

temp_so.o:     file format elf32-sisa
temp_so.o
architecture: sisa:3, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Encabezado del Programa:
    LOAD off    0x00000000 vaddr 0x00001f0c paddr 0x00001f0c align 2**0
         filesz 0x00000972 memsz 0x00000972 flags r-x
    LOAD off    0x00000972 vaddr 0x00004000 paddr 0x00004000 align 2**0
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00000ad0 vaddr 0x00004a00 paddr 0x00004a00 align 2**0
         filesz 0x00000000 memsz 0x00000040 flags rw-
    LOAD off    0x00000ad2 vaddr 0x00006000 paddr 0x00006000 align 2**0
         filesz 0x00000062 memsz 0x00000062 flags rw-
    LOAD off    0x00000b34 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x0000003a memsz 0x0000003a flags rw-
    LOAD off    0x00000b6e vaddr 0x0000c000 paddr 0x0000c000 align 2**0
         filesz 0x000001dc memsz 0x000001dc flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .sistema      000001dc  0000c000  0000c000  00000b6e  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .userCorreletras 0000087e  00002000  00002000  000000f4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userFibonacci 00000160  00004000  00004000  00000972  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .sysdata      0000003a  00008000  00008000  00000b34  2**1  CONTENTS, ALLOC, LOAD, DATA
  4 .userdataCorreletras 00000062  00006000  00006000  00000ad2  2**1  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  00004a00  00004a00  00000ad2  2**4  ALLOC
  6 .stab         00000f60  00004a40  00004a40  00000d4c  2**2  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000776  000059a0  000059a0  00001cac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00006000 l    d  .userdataCorreletras	00000000 .userdataCorreletras
00006034 g     O .userdataCorreletras	0000002b mensaje
00006060 g     O .userdataCorreletras	00000002 tics_timer
00006000 g     O .userdataCorreletras	0000000d letras
0000600d g     O .userdataCorreletras	0000000d colores
0000601a g     O .userdataCorreletras	0000001a divisores


Disassembly of section .userdataCorreletras:

00006000 <letras>:
    6000:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d              ABCDEFGHIJKLM

0000600d <colores>:
    600d:	3f 03 0c 30 15 3c 0f 2a 2a 3f 1a 21 2b              ?..0.<.**?.!+

0000601a <divisores>:
    601a:	01 00 02 00 03 00 04 00 05 00 06 00 07 00 08 00     ................
    602a:	09 00 0a 00 0b 00 0c 00 0d 00                       ..........

00006034 <mensaje>:
    6034:	70 75 6c 73 61 20 27 52 27 20 70 61 72 61 20 72     pulsa 'R' para r
    6044:	65 69 6e 69 63 69 61 72 20 6f 20 27 50 27 20 70     einiciar o 'P' p
    6054:	61 72 61 20 70 61 75 73 61 2e 00 00                 ara pausa...

00006060 <tics_timer>:
    6060:	01 00                                               ..
